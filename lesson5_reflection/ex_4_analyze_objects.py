from typing import Any, Dict, List, Tuple
import inspect
from collections import defaultdict


def analyze_object(obj: Any) -> None:
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –±—É–¥—å-—è–∫–∏–π –æ–±'—î–∫—Ç —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω—å–æ–≥–æ.

    Args:
        obj (Any): –û–±'—î–∫—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.
    """
    print("=" * 80)
    print(f"–ê–ù–ê–õ–Ü–ó –û–ë'–Ñ–ö–¢–ê: {repr(obj)}")
    print("=" * 80)

    # 1. –¢–∏–ø –æ–±'—î–∫—Ç–∞
    _analyze_object_type(obj)

    # 2. –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º–µ—Ç–æ–¥—ñ–≤ —Ç–∞ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤
    _analyze_attributes_and_methods(obj)

    # 3. –¢–∏–ø –∫–æ–∂–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
    _analyze_attribute_types(obj)

    # 4. –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    _analyze_additional_info(obj)


def _analyze_object_type(obj: Any) -> None:
    """–ê–Ω–∞–ª—ñ–∑—É—î —Ç–∏–ø –æ–±'—î–∫—Ç–∞."""
    print("\n1. –¢–ò–ü –û–ë'–Ñ–ö–¢–ê:")
    print("-" * 40)

    obj_type = type(obj)
    print(f"   –¢–∏–ø: {obj_type}")
    print(f"   –Ü–º'—è –∫–ª–∞—Å—É: {obj_type.__name__}")
    print(f"   –ú–æ–¥—É–ª—å: {obj_type.__module__}")
    print(f"   –ü–æ–≤–Ω–µ —ñ–º'—è: {obj_type.__module__}.{obj_type.__qualname__}")

    # MRO (Method Resolution Order)
    mro = [cls.__name__ for cls in obj_type.__mro__]
    print(f"   MRO: {' -> '.join(mro)}")

    # –ë–∞–∑–æ–≤—ñ –∫–ª–∞—Å–∏
    if obj_type.__bases__:
        bases = [base.__name__ for base in obj_type.__bases__]
        print(f"   –ë–∞–∑–æ–≤—ñ –∫–ª–∞—Å–∏: {', '.join(bases)}")
    else:
        print("   –ë–∞–∑–æ–≤—ñ –∫–ª–∞—Å–∏: –Ω–µ–º–∞—î")


def _analyze_attributes_and_methods(obj: Any) -> None:
    """–ê–Ω–∞–ª—ñ–∑—É—î –∞—Ç—Ä–∏–±—É—Ç–∏ —Ç–∞ –º–µ—Ç–æ–¥–∏ –æ–±'—î–∫—Ç–∞."""
    print("\n2. –ê–¢–†–ò–ë–£–¢–ò –¢–ê –ú–ï–¢–û–î–ò:")
    print("-" * 40)

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞—Ç—Ä–∏–±—É—Ç–∏
    all_attrs = dir(obj)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏
    categories = {
        '–ú–∞–≥—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏': [],
        '–ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏': [],
        '–ü—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏': [],
        '–í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ (properties)': [],
        '–ê—Ç—Ä–∏–±—É—Ç–∏ –¥–∞–Ω–∏—Ö': [],
        '–ú–æ–¥—É–ª—ñ/–∫–ª–∞—Å–∏': []
    }

    for attr_name in all_attrs:
        try:
            attr_value = getattr(obj, attr_name)
        except (AttributeError, Exception):
            continue

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è
        if attr_name.startswith('__') and attr_name.endswith('__'):
            categories['–ú–∞–≥—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏'].append(attr_name)
        elif attr_name.startswith('_'):
            if callable(attr_value):
                categories['–ü—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏'].append(attr_name)
            else:
                categories['–ê—Ç—Ä–∏–±—É—Ç–∏ –¥–∞–Ω–∏—Ö'].append(attr_name)
        elif isinstance(attr_value, property):
            categories['–í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ (properties)'].append(attr_name)
        elif callable(attr_value):
            categories['–ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏'].append(attr_name)
        elif inspect.ismodule(attr_value) or inspect.isclass(attr_value):
            categories['–ú–æ–¥—É–ª—ñ/–∫–ª–∞—Å–∏'].append(attr_name)
        else:
            categories['–ê—Ç—Ä–∏–±—É—Ç–∏ –¥–∞–Ω–∏—Ö'].append(attr_name)

    # –í–∏–≤–æ–¥–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    for category, attrs in categories.items():
        if attrs:
            print(f"\n   {category} ({len(attrs)}):")
            for attr in attrs[:10]:  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 10 –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
                print(f"     ‚Ä¢ {attr}")
            if len(attrs) > 10:
                print(f"     ... —Ç–∞ —â–µ {len(attrs) - 10}")


def _analyze_attribute_types(obj: Any) -> None:
    """–ê–Ω–∞–ª—ñ–∑—É—î —Ç–∏–ø–∏ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –æ–±'—î–∫—Ç–∞."""
    print("\n3. –¢–ò–ü–ò –ê–¢–†–ò–ë–£–¢–Ü–í:")
    print("-" * 40)

    # –ì—Ä—É–ø—É—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏ –∑–∞ —Ç–∏–ø–∞–º–∏
    type_groups = defaultdict(list)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ª–∏—à–µ –Ω–µ-–º–∞–≥—ñ—á–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    attrs_to_check = [attr for attr in dir(obj)
                      if not (attr.startswith('__') and attr.endswith('__'))]

    for attr_name in attrs_to_check:
        try:
            attr_value = getattr(obj, attr_name)
            attr_type = type(attr_value).__name__

            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∏–ø
            type_info = attr_type

            if callable(attr_value):
                if inspect.ismethod(attr_value):
                    type_info += " (–º–µ—Ç–æ–¥)"
                elif inspect.isfunction(attr_value):
                    type_info += " (—Ñ—É–Ω–∫—Ü—ñ—è)"
                elif inspect.isbuiltin(attr_value):
                    type_info += " (–≤–±—É–¥–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è)"
                else:
                    type_info += " (callable)"

            type_groups[type_info].append(attr_name)

        except (AttributeError, Exception) as e:
            type_groups[f"ERROR: {type(e).__name__}"].append(attr_name)

    # –í–∏–≤–æ–¥–∏–º–æ –≥—Ä—É–ø–∏ —Ç–∏–ø—ñ–≤
    for type_name, attrs in sorted(type_groups.items()):
        print(f"\n   {type_name} ({len(attrs)}):")
        for attr in attrs[:8]:  # –û–±–º–µ–∂—É—î–º–æ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
            try:
                attr_value = getattr(obj, attr)
                if not callable(attr_value):
                    print(f"     ‚Ä¢ {attr} = {repr(attr_value)}")
                else:
                    print(f"     ‚Ä¢ {attr}")
            except:
                print(f"     ‚Ä¢ {attr} (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)")
        if len(attrs) > 8:
            print(f"     ... —Ç–∞ —â–µ {len(attrs) - 8}")


def _analyze_additional_info(obj: Any) -> None:
    """–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–±'—î–∫—Ç."""
    print("\n4. –î–û–î–ê–¢–ö–û–í–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:")
    print("-" * 40)

    # –†–æ–∑–º—ñ—Ä –æ–±'—î–∫—Ç–∞
    try:
        size = obj.__sizeof__()
        print(f"   –†–æ–∑–º—ñ—Ä –≤ –ø–∞–º'—è—Ç—ñ: {size} –±–∞–π—Ç")
    except:
        print("   –†–æ–∑–º—ñ—Ä –≤ –ø–∞–º'—è—Ç—ñ: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

    # ID –æ–±'—î–∫—Ç–∞
    print(f"   ID –æ–±'—î–∫—Ç–∞: {id(obj)}")

    # –•–µ—à (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)
    try:
        hash_value = hash(obj)
        print(f"   –•–µ—à: {hash_value}")
    except TypeError:
        print("   –•–µ—à: –æ–±'—î–∫—Ç –Ω–µ —Ö–µ—à—É—î—Ç—å—Å—è")

    # __dict__ —è–∫—â–æ —ñ—Å–Ω—É—î
    if hasattr(obj, '__dict__'):
        instance_attrs = obj.__dict__
        print(f"   –ê—Ç—Ä–∏–±—É—Ç–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ (__dict__): {len(instance_attrs)}")
        if instance_attrs:
            for key, value in list(instance_attrs.items())[:5]:
                print(f"     ‚Ä¢ {key}: {type(value).__name__} = {repr(value)}")
            if len(instance_attrs) > 5:
                print(f"     ... —Ç–∞ —â–µ {len(instance_attrs) - 5}")

    # __slots__ —è–∫—â–æ —ñ—Å–Ω—É—î
    if hasattr(obj.__class__, '__slots__'):
        slots = obj.__class__.__slots__
        print(f"   –°–ª–æ—Ç–∏ (__slots__): {slots}")

    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
    if hasattr(obj, '__doc__') and obj.__doc__:
        doc = obj.__doc__.strip()
        if doc:
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: {doc[:100]}{'...' if len(doc) > 100 else ''}")


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ñ –∫–ª–∞—Å–∏ —Ç–∞ –æ–±'—î–∫—Ç–∏
    class Person:
        """–ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –æ—Å–æ–±–∏."""

        species = "Homo sapiens"  # –ê—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—É

        def __init__(self, name: str, age: int):
            self.name = name
            self.age = age
            self._private_data = "—Å–µ–∫—Ä–µ—Ç–Ω—ñ –¥–∞–Ω—ñ"

        def greet(self) -> str:
            """–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è."""
            return f"–ü—Ä–∏–≤—ñ—Ç, —è {self.name}!"

        def _private_method(self) -> str:
            """–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥."""
            return self._private_data

        @property
        def info(self) -> str:
            """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ—Å–æ–±—É."""
            return f"{self.name}, {self.age} —Ä–æ–∫—ñ–≤"

        @staticmethod
        def get_species() -> str:
            """–°—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥."""
            return Person.species

        @classmethod
        def create_adult(cls, name: str) -> 'Person':
            """–ö–ª–∞—Å–æ–≤–∏–π –º–µ—Ç–æ–¥."""
            return cls(name, 18)


    class Student(Person):
        """–°—Ç—É–¥–µ–Ω—Ç - –Ω–∞—Å–ª—ñ–¥–Ω–∏–∫ Person."""

        def __init__(self, name: str, age: int, university: str):
            super().__init__(name, age)
            self.university = university

        def study(self) -> str:
            """–ù–∞–≤—á–∞–Ω–Ω—è."""
            return f"{self.name} –Ω–∞–≤—á–∞—î—Ç—å—Å—è –≤ {self.university}"


    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ –æ–±'—î–∫—Ç–∞–º–∏
    print("üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–£–ù–ö–¶–Ü–á –ê–ù–ê–õ–Ü–ó–£ –û–ë'–Ñ–ö–¢–Ü–í")
    print("\n" + "üü¢ –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–∏–π –æ–±'—î–∫—Ç Person")
    person = Person("–Ü–≤–∞–Ω", 25)
    analyze_object(person)

    print("\n" + "üü° –¢–ï–°–¢ 2: –û–±'—î–∫—Ç-–Ω–∞—Å–ª—ñ–¥–Ω–∏–∫ Student")
    student = Student("–ú–∞—Ä—ñ—è", 20, "–ö–ü–Ü")
    analyze_object(student)

    print("\n" + "üîµ –¢–ï–°–¢ 3: –í–±—É–¥–æ–≤–∞–Ω–∏–π —Ç–∏–ø - —Å–ø–∏—Å–æ–∫")
    test_list = [1, 2, 3, "hello", {"key": "value"}]
    analyze_object(test_list)

    print("\n" + "üü† –¢–ï–°–¢ 4: –°–ª–æ–≤–Ω–∏–∫")
    test_dict = {"name": "–ü–µ—Ç—Ä–æ", "age": 30, "scores": [85, 90, 78]}
    analyze_object(test_dict)

    print("\n" + "üü£ –¢–ï–°–¢ 5: –§—É–Ω–∫—Ü—ñ—è")


    def sample_function(x: int, y: str = "default") -> str:
        """–ó—Ä–∞–∑–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."""
        return f"{x}: {y}"


    analyze_object(sample_function)

    print("\n" + "‚ö´ –¢–ï–°–¢ 6: –ö–ª–∞—Å (–Ω–µ –µ–∫–∑–µ–º–ø–ª—è—Ä)")
    analyze_object(Person)

    print("\n" + "=" * 80)
    print("‚úÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)