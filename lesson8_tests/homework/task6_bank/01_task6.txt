Завдання 6. Приклад комплексного тестування

Розробіть програму для роботи з банківськими транзакціями та протестуйте її за допомогою фікстур, моків, скіпів та параметризації. Напишіть клас BankAccount, який реалізує методи:

deposit(amount: float): поповнення рахунку;
withdraw(amount: float): зняття коштів (якщо достатньо коштів на рахунку).
get_balance() -> float: повертає поточний баланс.
Напишіть тести з використанням:

фікстур для створення об'єкта банківського рахунку перед тестами,
моків для тестування взаємодії із зовнішнім API (наприклад, для перевірки балансу),
скіпів для пропуску тестів зняття коштів, якщо рахунок порожній.
Використовуйте параметризацію для тестування різних сценаріїв поповнення та зняття коштів.


#---------------------------------------------------------------------------------------
# pytest.ini - конфігураційний файл pytest
[tool: pytest]
testpaths =.
python_files = test_ *.py * _test.py
python_classes = Test *
python_functions = test_ *
addopts =
-v
--tb = short
--strict - markers
--disable - warnings
markers =
slow: позначає
повільні
тести
integration: інтеграційні
тести
api: тести
API

# Приклад запуску тестів:
"""
# Запустити всі тести
pytest test_bank_account.py -v

# Запустити тільки тести з конкретною фікстурою
pytest test_bank_account.py::TestBankAccount::test_deposit_with_fixture -v

# Запустити параметризовані тести
pytest test_bank_account.py -k "parametrize" -v

# Запустити тести з показом пропущених
pytest test_bank_account.py -rs

# Запустити з покриттям коду
pytest test_bank_account.py --cov=bank_account --cov-report=html

# Запустити тільки тести моків
pytest test_bank_account.py -k "mock" -v
"""