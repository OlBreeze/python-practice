"""
–†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —á–∏—Å–µ–ª Decimal –≤ Python
================================================
"""

from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN, getcontext
import math


def demo_rounding():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""

    # –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = Decimal('44.22') / Decimal('8454.325')
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    print("=" * 60)

    # ========================================
    # –°–ü–û–°–û–ë 1: –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ N –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    # ========================================
    print("1Ô∏è‚É£  –û–ö–†–£–ì–õ–ï–ù–ò–ï –î–û N –ó–ù–ê–ö–û–í –ü–û–°–õ–ï –ó–ê–ü–Ø–¢–û–ô:")

    def format_decimal_places(number: Decimal, decimal_places: int = 5) -> str:
        """–û–∫—Ä—É–≥–ª—è–µ—Ç –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π"""
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '0.00001' –¥–ª—è 5 –∑–Ω–∞–∫–æ–≤)
        quantize_template = Decimal('0.' + '0' * decimal_places)
        rounded = number.quantize(quantize_template, rounding=ROUND_HALF_UP)
        return str(rounded.normalize())  # normalize() —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏

    for places in [2, 3, 5, 8]:
        rounded = format_decimal_places(result, places)
        print(f"   –î–æ {places} –∑–Ω–∞–∫–æ–≤: {rounded}")

    # ========================================
    # –°–ü–û–°–û–ë 2: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞—á–∞—â–∏—Ö —Ü–∏—Ñ—Ä
    # ========================================
    print(f"\n2Ô∏è‚É£  –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –û–ë–©–ï–ì–û –ö–û–õ–ò–ß–ï–°–¢–í–ê –ó–ù–ê–ß–ê–©–ò–• –¶–ò–§–†:")

    def format_significant_digits(number: Decimal, total_digits: int = 5) -> str:
        """–û–∫—Ä—É–≥–ª—è–µ—Ç –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞—á–∞—â–∏—Ö —Ü–∏—Ñ—Ä"""
        if number == 0:
            return "0"

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        original_prec = getcontext().prec
        getcontext().prec = total_digits

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –Ω–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        rounded = +number  # –£–Ω–∞—Ä–Ω—ã–π –ø–ª—é—Å –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
        getcontext().prec = original_prec

        return str(rounded.normalize())

    for digits in [3, 5, 7, 10]:
        rounded = format_significant_digits(result, digits)
        print(f"   –î–æ {digits} –∑–Ω–∞—á–∞—â–∏—Ö —Ü–∏—Ñ—Ä: {rounded}")

    # ========================================
    # –°–ü–û–°–û–ë 3: –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π)
    # ========================================
    print(f"\n3Ô∏è‚É£  –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î (–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô):")

    def format_smart_rounding(number: Decimal, max_decimals: int = 5) -> str:
        """
        –£–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ:
        - –î–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        - For –º–∞–ª—ã—Ö —á–∏—Å–µ–ª: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–∞—â–∏–µ —Ü–∏—Ñ—Ä—ã
        """
        abs_number = abs(number)

        if abs_number >= 1:
            # –î–ª—è —á–∏—Å–µ–ª >= 1: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            quantize_template = Decimal('0.' + '0' * max_decimals)
            rounded = number.quantize(quantize_template, rounding=ROUND_HALF_UP)
        elif abs_number >= Decimal('0.001'):
            # –î–ª—è —á–∏—Å–µ–ª 0.001-0.999: –¥–æ max_decimals –∑–Ω–∞–∫–æ–≤
            quantize_template = Decimal('0.' + '0' * max_decimals)
            rounded = number.quantize(quantize_template, rounding=ROUND_HALF_UP)
        else:
            # –î–ª—è –æ—á–µ–Ω—å –º–∞–ª—ã—Ö —á–∏—Å–µ–ª: –Ω–∞—É—á–Ω–∞—è –∑–∞–ø–∏—Å—å –∏–ª–∏ –∑–Ω–∞—á–∞—â–∏–µ —Ü–∏—Ñ—Ä—ã
            original_prec = getcontext().prec
            getcontext().prec = max_decimals
            rounded = +number
            getcontext().prec = original_prec

        return str(rounded.normalize())

    test_numbers = [
        Decimal('44.22') / Decimal('8454.325'),  # –ù–∞—à —Å–ª—É—á–∞–π
        Decimal('123.456789'),
        Decimal('0.123456789'),
        Decimal('0.000123456789'),
        Decimal('0.000000123456789')
    ]

    for num in test_numbers:
        smart_rounded = format_smart_rounding(num, 5)
        print(f"   {num} ‚Üí {smart_rounded}")

    # ========================================
    # –°–ü–û–°–û–ë 4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ format() –∏ f-strings
    # ========================================
    print(f"\n4Ô∏è‚É£  –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï format() –ò f-strings:")

    # –° –ø–æ–º–æ—â—å—é format()
    formatted_1 = "{:.5f}".format(float(result))
    print(f"   format(.5f): {formatted_1}")

    # –° –ø–æ–º–æ—â—å—é f-string
    float_result = float(result)
    formatted_2 = f"{float_result:.5f}"
    print(f"   f-string:.5f: {formatted_2}")

    # –° –ø–æ–º–æ—â—å—é g –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞
    formatted_3 = f"{float_result:.5g}"
    print(f"   f-string:.5g: {formatted_3}")

    # ========================================
    # –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
    # ========================================
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê:")

    def format_calculator_result(number: Decimal, max_decimals: int = 5) -> str:
        """
        –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:
        - –£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏
        - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
        """
        if number == 0:
            return "0"

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ max_decimals –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        quantize_template = Decimal('0.' + '0' * max_decimals)
        rounded = number.quantize(quantize_template, rounding=ROUND_HALF_UP)

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        normalized = rounded.normalize()
        result_str = str(normalized)

        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—É—á–Ω—É—é –∑–∞–ø–∏—Å—å
        if len(result_str.replace('.', '').replace('-', '')) > 15:
            return f"{float(normalized):.5e}"

        return result_str

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    test_cases = [
        (Decimal('44.22') / Decimal('8454.325'), "–ù–∞—à –ø—Ä–∏–º–µ—Ä"),
        (Decimal('10') / Decimal('3'), "10/3"),
        (Decimal('1') / Decimal('7'), "1/7"),
        (Decimal('123.456789'), "–ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ"),
        (Decimal('0.000000123456789'), "–û—á–µ–Ω—å –º–∞–ª–æ–µ —á–∏—Å–ª–æ"),
        (Decimal('10.0'), "–¶–µ–ª–æ–µ —á–∏—Å–ª–æ"),
        (Decimal('0'), "–ù–æ–ª—å")
    ]

    for num, description in test_cases:
        formatted = format_calculator_result(num, 5)
        print(f"   {description}: {formatted}")


# ========================================
# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ö–õ–ê–°–°–ê CALCULATOR
# ========================================

def updated_format_number(number: Decimal, max_decimals: int = 5) -> str:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ format_number –¥–ª—è –∫–ª–∞—Å—Å–∞ Calculator.

    Args:
        number: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        max_decimals: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    """
    if number == 0:
        return "0"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª—ã–º
    if number == number.to_integral_value():
        return str(int(number))

    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ max_decimals –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    quantize_template = Decimal('0.' + '0' * max_decimals)
    rounded = number.quantize(quantize_template, rounding=ROUND_HALF_UP)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏
    result_str = str(rounded.normalize())

    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—É—á–Ω—É—é –∑–∞–ø–∏—Å—å
    if len(result_str.replace('.', '').replace('-', '')) > 12:
        return f"{float(rounded):.{max_decimals}e}"

    return result_str


if __name__ == "__main__":
    demo_rounding()

    print(f"\n" + "=" * 60)
    print("–ü–†–ò–ú–ï–† –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í –ö–õ–ê–°–° Calculator:")
    print("=" * 60)

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–ª–∞—Å—Å–µ Calculator
    result = Decimal('44.22') / Decimal('8454.325')

    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    print(f"–°—Ç–∞—Ä—ã–π format_number: {str(result.normalize())}")
    print(f"–ù–æ–≤—ã–π format_number: {updated_format_number(result, 5)}")

    print(f"\n–î—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã:")
    examples = [
        Decimal('10.000'),
        Decimal('3.141592653589793'),
        Decimal('0.000123456789'),
        Decimal('123456.789123456')
    ]

    for ex in examples:
        old = str(ex.normalize())
        new = updated_format_number(ex, 5)
        print(f"   {old} ‚Üí {new}")