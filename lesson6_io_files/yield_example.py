def demonstrate_yield_behavior():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ yield –ø–æ —à–∞–≥–∞–º."""
    print("=" * 60)
    print("–ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢ –° yield digit")
    print("=" * 60)

    def my_generator(n):
        print(f"  üü¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å n={n}")
        for digit in range(n):
            print(f"  üîÑ –ì–æ—Ç–æ–≤–∏–º—Å—è yield {digit}")
            yield digit
            print(f"  ‚Ü©Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å–ª–µ yield {digit}")
        print(f"  üî¥ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

    print("1. –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (—Ñ—É–Ω–∫—Ü–∏—è –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!):")
    gen = my_generator(3)
    print(f"   gen = {gen}")
    print(f"   type(gen) = {type(gen)}")

    print("\n2. –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ next() - —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è:")
    value1 = next(gen)
    print(f"   –ü–æ–ª—É—á–∏–ª–∏: {value1}")

    print("\n3. –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ next() - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    value2 = next(gen)
    print(f"   –ü–æ–ª—É—á–∏–ª–∏: {value2}")

    print("\n4. –¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ next():")
    value3 = next(gen)
    print(f"   –ü–æ–ª—É—á–∏–ª–∏: {value3}")

    print("\n5. –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤—ã–∑–æ–≤ next() - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Å—á–µ—Ä–ø–∞–Ω:")
    try:
        value4 = next(gen)
        print(f"   –ü–æ–ª—É—á–∏–ª–∏: {value4}")
    except StopIteration:
        print("   ‚ùå StopIteration - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")


def compare_return_vs_yield():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ return vs yield."""
    print("\n" + "=" * 60)
    print("RETURN vs YIELD")
    print("=" * 60)

    # –§—É–Ω–∫—Ü–∏—è —Å return
    def function_with_return(n):
        result = []
        for digit in range(n):
            result.append(digit)
        return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï —Å—Ä–∞–∑—É

    # –§—É–Ω–∫—Ü–∏—è —Å yield (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)
    def function_with_yield(n):
        for digit in range(n):
            yield digit  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ü–û –û–î–ù–û–ú–£

    print("1. –§—É–Ω–∫—Ü–∏—è —Å return:")
    result = function_with_return(5)
    print(f"   result = {result}")
    print(f"   type(result) = {type(result)}")
    print("   ‚Ü≥ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –°–†–ê–ó–£ –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏")

    print("\n2. –§—É–Ω–∫—Ü–∏—è —Å yield:")
    generator = function_with_yield(5)
    print(f"   generator = {generator}")
    print(f"   type(generator) = {type(generator)}")
    print("   ‚Ü≥ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è –ü–û –¢–†–ï–ë–û–í–ê–ù–ò–Æ")

    print("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:")
    for i, value in enumerate(generator):
        print(f"   –®–∞–≥ {i + 1}: –ø–æ–ª—É—á–∏–ª–∏ {value}")


def yield_memory_efficiency():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤."""
    print("\n" + "=" * 60)
    print("–≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ü–ê–ú–Ø–¢–ò")
    print("=" * 60)

    import sys

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Å–ø–∏—Å–∫–∞
    def create_list(n):
        return [x for x in range(n)]

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    def create_generator(n):
        for x in range(n):
            yield x

    n = 1000

    big_list = create_list(n)
    big_generator = create_generator(n)

    print(f"–†–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –∏–∑ {n} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
    print(f"   sys.getsizeof(big_list) = {sys.getsizeof(big_list)} –±–∞–π—Ç")

    print(f"\n–†–∞–∑–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {n} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
    print(f"   sys.getsizeof(big_generator) = {sys.getsizeof(big_generator)} –±–∞–π—Ç")

    print(f"\n–≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏: {sys.getsizeof(big_list) / sys.getsizeof(big_generator):.1f}x")


def yield_with_state():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ."""
    print("\n" + "=" * 60)
    print("–°–û–•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø")
    print("=" * 60)

    def stateful_generator():
        print("   üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        count = 0

        while count < 5:
            count += 1
            print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ yield: count = {count}")
            yield f"–ó–Ω–∞—á–µ–Ω–∏–µ-{count}"
            print(f"   ‚è≠Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ yield: count = {count}")

    print("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏:")

    gen = stateful_generator()

    print("\n–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É:")
    print(f"1. {next(gen)}")
    print(f"2. {next(gen)}")
    print(f"3. {next(gen)}")


def yield_expressions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è yield –∫–∞–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏—è."""
    print("\n" + "=" * 60)
    print("YIELD –ö–ê–ö –í–´–†–ê–ñ–ï–ù–ò–ï")
    print("=" * 60)

    def echo_generator():
        print("   üé¨ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
        while True:
            received = yield "–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ"
            if received is None:
                break
            print(f"   üì® –ü–æ–ª—É—á–µ–Ω–æ: {received}")
            yield f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {received.upper()}"

    print("yield –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ send():")

    gen = echo_generator()

    # –ü–µ—Ä–≤—ã–π next() –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    response1 = next(gen)
    print(f"1. {response1}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    response2 = gen.send("hello")
    print(f"2. {response2}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    response3 = next(gen)
    print(f"3. {response3}")


def practical_yield_examples():
    """–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è yield."""
    print("\n" + "=" * 60)
    print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´")
    print("=" * 60)

    # 1. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    def read_file_lines(filename):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º."""
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                for line_num, line in enumerate(file, 1):
                    yield line_num, line.strip()
        except FileNotFoundError:
            yield 0, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"

    # 2. –ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
    def fibonacci_generator():
        """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏."""
        a, b = 0, 1
        while True:
            yield a
            a, b = b, a + b

    # 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    def filter_even_numbers(numbers):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª."""
        for num in numbers:
            if num % 2 == 0:
                yield num

    print("1. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –§–∏–±–æ–Ω–∞—á—á–∏ (–ø–µ—Ä–≤—ã–µ 10 —á–∏—Å–µ–ª):")
    fib = fibonacci_generator()
    fib_numbers = [next(fib) for _ in range(10)]
    print(f"   {fib_numbers}")

    print("\n2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª:")
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    even_gen = filter_even_numbers(numbers)
    even_numbers = list(even_gen)
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ: {numbers}")
    print(f"   –ß–µ—Ç–Ω—ã–µ: {even_numbers}")

    print("\n3. –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
    fake_file_content = ["—Å—Ç—Ä–æ–∫–∞ 1", "—Å—Ç—Ä–æ–∫–∞ 2", "—Å—Ç—Ä–æ–∫–∞ 3"]

    def read_fake_file():
        for i, line in enumerate(fake_file_content, 1):
            yield i, line

    print("   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ '—Ñ–∞–π–ª–∞':")
    for line_num, content in read_fake_file():
        print(f"     {line_num}: {content}")


def yield_vs_list_comprehension():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏ list comprehension."""
    print("\n" + "=" * 60)
    print("GENERATOR vs LIST COMPREHENSION")
    print("=" * 60)

    # List comprehension - —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É
    squares_list = [x ** 2 for x in range(5)]
    print(f"List comprehension: {squares_list}")
    print(f"Type: {type(squares_list)}")

    # Generator expression - —Å–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    squares_gen = (x ** 2 for x in range(5))
    print(f"\nGenerator expression: {squares_gen}")
    print(f"Type: {type(squares_gen)}")

    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    print("\n–ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:")
    for square in squares_gen:
        print(f"   {square}")

    # –ü–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Å—á–µ—Ä–ø–∞–Ω!
    print(f"\n–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:")
    squares_from_gen = list(squares_gen)
    print(f"   {squares_from_gen}")  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫!


def common_yield_mistakes():
    """–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å yield."""
    print("\n" + "=" * 60)
    print("–ß–ê–°–¢–´–ï –û–®–ò–ë–ö–ò –° YIELD")
    print("=" * 60)

    print("‚ùå –û—à–∏–±–∫–∞ 1: –°–º–µ—à–∏–≤–∞–Ω–∏–µ return –∏ yield")
    print("def bad_generator():")
    print("    yield 1")
    print("    return 2  # –≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä!")
    print("    yield 3   # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è")

    print("\n‚ùå –û—à–∏–±–∫–∞ 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞")

    def single_use_gen():
        for i in range(3):
            yield i

    gen = single_use_gen()
    first_use = list(gen)
    second_use = list(gen)  # –ü—É—Å—Ç–æ–π!

    print(f"–ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {first_use}")
    print(f"–í—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {second_use}")

    print("\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
    gen1 = single_use_gen()
    gen2 = single_use_gen()
    print(f"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 1: {list(gen1)}")
    print(f"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 2: {list(gen2)}")


if __name__ == "__main__":
    demonstrate_yield_behavior()
    compare_return_vs_yield()
    yield_memory_efficiency()
    yield_with_state()
    yield_expressions()
    practical_yield_examples()
    yield_vs_list_comprehension()
    common_yield_mistakes()

    print("\n" + "=" * 60)
    print("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –û YIELD")
    print("=" * 60)
    print("yield digit –¥–µ–ª–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ:")
    print("üîÑ –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    print("üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ digit –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –∫–æ–¥—É")
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)")
    print("‚è∏Ô∏è –ñ–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ next() –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏")
    print("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    print("‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏ (–ª–µ–Ω–∏–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)")
    print("‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("‚Ä¢ –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    print("‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")