# 2. Ітератор для генерації унікальних ідентифікаторів
# Створіть ітератор, який генерує унікальні ідентифікатори
# (наприклад, на основі UUID або хеш-функції).
# hashed = hashlib.sha256(raw.encode()).hexdigest()
# Ідентифікатори повинні генеруватися один за одним при кожній ітерації, і бути унікальними.

import uuid
from typing import Iterator


class UniqueIDGenerator:
    """
    Ітератор для генерації унікальних ідентифікаторів на основі UUID4.

    Кожна ітерація повертає новий унікальний ідентифікатор у вигляді рядка.
    """

    def __iter__(self) -> Iterator[str]:
        """
        Повертає ітератор, який нескінченно генерує унікальні UUID4.

        :return: Ітератор рядків (UUID)
        """
        return self

    def __next__(self) -> str:
        """
        Генерує наступний унікальний ідентифікатор.
        :return: Унікальний UUID у вигляді рядка.
        """
        return str(uuid.uuid4())


if __name__ == "__main__":
    id_gen = UniqueIDGenerator()
    for i, uid in zip(range(5), id_gen):
        print(f"ID {i + 1}: {uid}")

# range(5) — створює послідовність чисел від 0 до 4 (5 чисел).
#
# id_gen — це ітератор, який генерує безкінечний потік унікальних ідентифікаторів.
#
# zip бере по одному елементу з кожного ітератора і формує кортежі.
# Цикл пройде рівно 5 разів, тому що range(5) закінчиться після 5 ітерацій.
# Без zip з range(5) ми б отримували безкінечний цикл (оскільки id_gen нескінченний).