"""
Django settings for library project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#nw21kv)82%n4tqbuvt!_(ftx8e@plu^gcb9bk8!%e%@4$9r!k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'books',
    'authentication',
    'rest_framework',
    # 'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'django_filters',
    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'library.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'library.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5,  # пагінація по 5 елементів
}

SIMPLE_JWT = {
    # 'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# Swagger settings
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': False,
    'JSON_EDITOR': True,
}

# REST_FRAMEWORK Цей код є **конфігураційним словником** для фреймворку **Django REST Framework (DRF)**.
#
# Він визначає **глобальні налаштування** для всіх ваших API-представлень (Views), встановлюючи стандартні правила для аутентифікації, дозволів, фільтрації та пагінації.
#
# ### 1. `DEFAULT_AUTHENTICATION_CLASSES` (Аутентифікація)
#
# * **Значення:** `rest_framework_simplejwt.authentication.JWTAuthentication`
# * **Дія:** Встановлює, що основним способом підтвердження особи користувача (аутентифікації) для всіх API-запитів є **JWT (JSON Web Token)**.
# Це означає, що користувачі повинні надсилати дійсний JWT у заголовку запиту, щоб отримати доступ до захищених ресурсів.
#
# ### 2. `DEFAULT_PERMISSION_CLASSES` (Дозволи)
#
# * **Значення:** `rest_framework.permissions.IsAuthenticatedOrReadOnly`
# * **Дія:** Визначає стандартні правила доступу.
#     * **Неаутентифіковані** користувачі (гості) можуть виконувати лише **безпечні (тільки для читання)** операції (GET, HEAD, OPTIONS).
#     * **Аутентифіковані** користувачі можуть виконувати **будь-які** операції (включаючи створення, оновлення та видалення: POST, PUT, DELETE).
#
# ### 3. `DEFAULT_FILTER_BACKENDS` (Фільтрація та Пошук)
#
# * **Значення:** Перелік трьох класів.
# * **Дія:** Встановлює, які механізми фільтрації та пошуку будуть доступні за замовчуванням для всіх представлень.
#     * `django_filters.rest_framework.DjangoFilterBackend`: Дозволяє фільтрувати дані за **точними значеннями полів** (наприклад, `?category=electronics`).
#     * `rest_framework.filters.SearchFilter`: Дозволяє виконувати **пошук** за ключовими словами у визначених полях (наприклад, `?search=книга`).
#     * `rest_framework.filters.OrderingFilter`: Дозволяє **сортувати** результати за полями (наприклад, `?ordering=-price`).
#
# ### 4. `DEFAULT_PAGINATION_CLASS` (Пагінація)
#
# * **Значення:** `rest_framework.pagination.PageNumberPagination`
# * **Дія:** Встановлює стандартний механізм **посторінкового виведення** великих наборів даних.
#
# ### 5. `PAGE_SIZE` (Розмір сторінки)
#
# * **Значення:** `10`
# * **Дія:** У поєднанні з налаштуванням пагінації вище, це означає, що за замовчуванням кожна сторінка API-відповіді буде містити **10 елементів** (наприклад, 10 книг, 10 користувачів тощо).

#  ### 6. `SIMPLE_JWT` контролює термін дії згенерованих токенів:
#
# ACCESS_TOKEN_LIFETIME: Це токен, який використовується для доступу до захищених API-ресурсів. Його зазвичай роблять коротким (15-60 хвилин) для підвищення безпеки.
#
# REFRESH_TOKEN_LIFETIME: Цей токен використовується для отримання нового Access Token, коли термін дії старого закінчився. Його роблять довшим (дні або тижні).
