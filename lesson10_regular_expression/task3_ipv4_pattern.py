import re

def is_ip_address(text: str) -> bool:
    """
    Проверяет, является ли введённая строка IPv4-адресом.
    """
    pattern = r"^((25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)\.){3}" \
              r"(25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)$"
    # octet = r'(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'
    # ipv4_pattern = rf'^{octet}\.{octet}\.{octet}\.{octet}$'

    return re.match(pattern, text) is not None

# ^ — начало строки
# $ — конец строки  => значит, строка должна быть только IP-адресом, без лишних символов
# ------------------------------------
# Одна "октетная" часть IP
# Часть 25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d описывает числа от 0 до 255:
# 25[0-5] — числа 250–255
# 2[0-4]\d — числа 200–249
# 1\d{2} — числа 100–199
# [1-9]?\d — числа 0–99
# (опциональная [1-9]? позволяет "0", а с \d — 1–9, 10–99)
# --------------------------------------
# (( ... )\.){3}
# ( ... ) — одна часть числа (см. выше)
# \. — точка (экранированная, потому что . в regex значит "любой символ")
# {3} — таких "число + точка" должно быть ровно три
# --------------------------------------------
# В конце стоит ещё раз та же часть (25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d) — но без точки, потому что это последний кусок.

if __name__ == "__main__":
    user_input = input("Введите строку: ")
    # if is_ip_address(user_input):
    #     print("Это корректный IPv4-адрес")
    # else:
    #     print("Это НЕ IPv4-адрес")
    print("Это корректный IPv4-адрес" if is_ip_address(user_input) else "Это НЕ IPv4-адрес")
# <значение_если_true> if <условие> else <значение_если_false>
# print("Это корректный IPv4-адрес" if is_ip_address(user_input) else "Это НЕ IPv4-адрес")

# print(is_ip_address("192.168.0.1"))    # True
# print(is_ip_address("255.255.255.255")) # True
# print(is_ip_address("256.100.50.25"))   # False (256 > 255)
# print(is_ip_address("192.168.1"))       # False (не хватает октета)
# print(is_ip_address("abc.def.ghi.jkl")) # False
