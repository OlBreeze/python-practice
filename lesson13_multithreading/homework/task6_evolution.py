import threading
import random
import time
from typing import List


class Organism:
    """
    –ö–ª–∞—Å, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –æ—Ä–≥–∞–Ω—ñ–∑–º –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.
    """

    def __init__(self, energy: int = 10, age: int = 0):
        self.energy = energy
        self.age = age
        self.alive = True

    def live(self) -> List['Organism']:
        """
        –û–¥–∏–Ω —Ü–∏–∫–ª –∂–∏—Ç—Ç—è –æ—Ä–≥–∞–Ω—ñ–∑–º—É:
        —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è —ó–∂—ñ, —Å—Ç–∞—Ä—ñ–Ω–Ω—è, —Å–º–µ—Ä—Ç—å, —Ä–æ–∑–º–Ω–æ–∂–µ–Ω–Ω—è.

        :return: —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏—Ö –Ω–∞—â–∞–¥–∫—ñ–≤ (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º)
        """
        if not self.alive:
            return []

        # –û—Ä–≥–∞–Ω—ñ–∑–º —ó—Å—Ç—å (–æ—Ç—Ä–∏–º—É—î –µ–Ω–µ—Ä–≥—ñ—é)
        food = random.randint(0, 5)
        self.energy += food

        # –°—Ç–∞—Ä—ñ–Ω–Ω—è
        self.age += 1
        self.energy -= 2  # –≤–∏—Ç—Ä–∞—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—ó –Ω–∞ –∂–∏—Ç—Ç—è

        if self.energy <= 0 or self.age > 10:
            self.alive = False
            print(f"üíÄ –û—Ä–≥–∞–Ω—ñ–∑–º –ø–æ–º–µ—Ä (–≤—ñ–∫: {self.age}, "
                  f"–µ–Ω–µ—Ä–≥—ñ—è: {self.energy})")
            return []

        # –†–æ–∑–º–Ω–æ–∂–µ–Ω–Ω—è
        offspring = []
        if self.energy > 15 and random.random() < 0.3:
            self.energy -= 5
            child = Organism(energy=5)
            offspring.append(child)
            print(f"üçº –ù–æ–≤–∏–π –æ—Ä–≥–∞–Ω—ñ–∑–º –Ω–∞—Ä–æ–¥–∏–≤—Å—è! "
                  f"(–≤—ñ–¥ –±–∞—Ç—å–∫–∞ –∑ –µ–Ω–µ—Ä–≥—ñ—î—é: {self.energy})")

        return offspring


def process_organism(org: Organism, new_offspring: List[Organism],
                     lock: threading.Lock) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –æ–¥–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω—ñ–∑–º—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ.

    :param org: –µ–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–≥–∞–Ω—ñ–∑–º—É
    :param new_offspring: –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏—Ö –Ω–∞—â–∞–¥–∫—ñ–≤
    :param lock: –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
    """
    offspring = org.live()
    with lock:
        new_offspring.extend(offspring)


def simulate_population(population: List[Organism],
                        generations: int = 10) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞—î —Å–∏–º—É–ª—è—Ü—ñ—é –ø–æ–ø—É–ª—è—Ü—ñ—ó –Ω–∞ –∑–∞–¥–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å.

    :param population: –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–ø—É–ª—è—Ü—ñ—è
    :param generations: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å (—Ä–∞—É–Ω–¥—ñ–≤)
    """
    lock = threading.Lock()

    for gen in range(1, generations + 1):
        print(f"\nüå± –ü–æ–∫–æ–ª—ñ–Ω–Ω—è {gen}, –ø–æ–ø—É–ª—è—Ü—ñ—è: {len(population)}")
        threads = []
        new_organisms: List[Organism] = []

        for org in population:
            thread = threading.Thread(target=process_organism,
                                      args=(org, new_organisms, lock))
            thread.start()
            threads.append(thread)

        # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—Ç–æ–∫—ñ–≤
        for t in threads:
            t.join()

        # –í–∏–¥–∞–ª—è—î–º–æ –º–µ—Ä—Ç–≤–∏—Ö
        population = [org for org in population if org.alive]

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏—Ö
        population.extend(new_organisms)

        # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ
        time.sleep(0.5)

    print(f"\n–°–∏–º—É–ª—è—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö—ñ–Ω—Ü–µ–≤–∞ –ø–æ–ø—É–ª—è—Ü—ñ—è: {len(population)}")


# ----let's go! )))-----------------
if __name__ == "__main__":
    initial_population = [Organism() for _ in range(10)]
    simulate_population(initial_population, generations=10)
