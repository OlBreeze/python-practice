import asyncio

async def micro_task():
    print("---Micro Task is starting...")
    await asyncio.sleep(1)
    print("---Micro Task is done...")

async def macro_task():
    print("-Macro Task is starting...")
    asyncio.create_task(micro_task())
    print("-Macro Task is continue...")
    await asyncio.sleep(1)
    print("-Macro Task is done...")

async def main():
    print("Starting main loop...")
    await macro_task()
    print("Main loop is done...")

# asyncio.run(main()) -# —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∏–∂–µ –∫–æ–¥


# macro_task() –∑–∞–ø—É—Å–∫–∞–µ—Ç micro_task() —á–µ—Ä–µ–∑ asyncio.create_task() ‚Äî
# —ç—Ç–æ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –º–∞–∫—Ä–æ–∑–∞–¥–∞—á—É.
#
# –û–±–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ event loop.
# asyncio.run(main()) –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–≥–æ, –∫–æ–≥–¥–∞ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.
#
# üîπ –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è ‚Äî
# –º–∏–∫—Ä–æ-–∑–∞–¥–∞—á–∞ –Ω–∞—á–Ω—ë—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –º–∞–∫—Ä–æ-–∑–∞–¥–∞—á–∏, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.


loop = asyncio.get_event_loop()

loop.call_soon(lambda: print("Micro task is started..."))
loop.call_later(1, lambda: print("Macro task is started..."))

loop.run_until_complete(asyncio.sleep(2))
#
# loop.call_soon() ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏
# (–≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ, –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ event loop).
#
# loop.call_later(1, ...) ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞–∫—Ä–æ–∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É.
#
# loop.run_until_complete(asyncio.sleep(2)) ‚Äî
# –∑–∞–ø—É—Å–∫–∞–µ—Ç event loop –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –¥–∞—Ç—å –∑–∞–¥–∞—á–∞–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è.
