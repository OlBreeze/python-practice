import json
from typing import List, Dict, Any, Optional
from pathlib import Path


class Book:
    """
    –ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–Ω–∏–≥–∏.

    Attributes:
        –Ω–∞–∑–≤–∞ (str): –ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏
        –∞–≤—Ç–æ—Ä (str): –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
        —Ä—ñ–∫ (int): –†—ñ–∫ –≤–∏–¥–∞–Ω–Ω—è
        –Ω–∞—è–≤–Ω—ñ—Å—Ç—å (bool): –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–∏–≥–∞
    """

    def __init__(self, –Ω–∞–∑–≤–∞: str, –∞–≤—Ç–æ—Ä: str, —Ä—ñ–∫: int, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å: bool) -> None:
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç–∞ –∫–Ω–∏–≥–∏.

        Args:
            –Ω–∞–∑–≤–∞: –ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏
            –∞–≤—Ç–æ—Ä: –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
            —Ä—ñ–∫: –†—ñ–∫ –≤–∏–¥–∞–Ω–Ω—è
            –Ω–∞—è–≤–Ω—ñ—Å—Ç—å: –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–∏–≥–∞
        """
        self.–Ω–∞–∑–≤–∞ = –Ω–∞–∑–≤–∞
        self.–∞–≤—Ç–æ—Ä = –∞–≤—Ç–æ—Ä
        self.—Ä—ñ–∫ = —Ä—ñ–∫
        self.–Ω–∞—è–≤–Ω—ñ—Å—Ç—å = –Ω–∞—è–≤–Ω—ñ—Å—Ç—å

    def to_dict(self) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç –∫–Ω–∏–≥–∏ –≤ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è JSON —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.

        Returns:
            Dict[str, Any]: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –∫–Ω–∏–≥–∏
        """
        return {
            "–Ω–∞–∑–≤–∞": self.–Ω–∞–∑–≤–∞,
            "–∞–≤—Ç–æ—Ä": self.–∞–≤—Ç–æ—Ä,
            "—Ä—ñ–∫": self.—Ä—ñ–∫,
            "–Ω–∞—è–≤–Ω—ñ—Å—Ç—å": self.–Ω–∞—è–≤–Ω—ñ—Å—Ç—å
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Book':
        """
        –°—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç –∫–Ω–∏–≥–∏ –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞.

        Args:
            data: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –∫–Ω–∏–≥–∏

        Returns:
            Book: –ù–æ–≤–∏–π –æ–±'—î–∫—Ç –∫–Ω–∏–≥–∏
        """
        return cls(
            –Ω–∞–∑–≤–∞=data["–Ω–∞–∑–≤–∞"],
            –∞–≤—Ç–æ—Ä=data["–∞–≤—Ç–æ—Ä"],
            —Ä—ñ–∫=data["—Ä—ñ–∫"],
            –Ω–∞—è–≤–Ω—ñ—Å—Ç—å=data["–Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]
        )

    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–Ω–∏–≥–∏."""
        status = "‚úì –î–æ—Å—Ç—É–ø–Ω–∞" if self.–Ω–∞—è–≤–Ω—ñ—Å—Ç—å else "‚úó –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        return f'"{self.–Ω–∞–∑–≤–∞}" –≤—ñ–¥ {self.–∞–≤—Ç–æ—Ä} ({self.—Ä—ñ–∫}) - {status}'


class LibraryManager:
    """
    –ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é –∫–Ω–∏–≥.

    Attributes:
        file_path (Path): –®–ª—è—Ö –¥–æ JSON —Ñ–∞–π–ª—É –∑ –∫–Ω–∏–≥–∞–º–∏
        books (List[Book]): –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —É –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ
    """

    def __init__(self, file_path: str = "books.json") -> None:
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏.

        Args:
            file_path: –®–ª—è—Ö –¥–æ JSON —Ñ–∞–π–ª—É –∑ –∫–Ω–∏–≥–∞–º–∏
        """
        self.file_path = Path(file_path)
        self.books: List[Book] = []
        self._create_initial_json()
        self.load_books()

    def _create_initial_json(self) -> None:
        """–°—Ç–≤–æ—Ä—é—î –ø–æ—á–∞—Ç–∫–æ–≤–∏–π JSON —Ñ–∞–π–ª, —è–∫—â–æ –≤—ñ–Ω –Ω–µ —ñ—Å–Ω—É—î."""
        if not self.file_path.exists():
            initial_books = [
                {
                    "–Ω–∞–∑–≤–∞": "–ö–æ–±–∑–∞—Ä",
                    "–∞–≤—Ç–æ—Ä": "–¢–∞—Ä–∞—Å –®–µ–≤—á–µ–Ω–∫–æ",
                    "—Ä—ñ–∫": 1840,
                    "–Ω–∞—è–≤–Ω—ñ—Å—Ç—å": True
                },
                {
                    "–Ω–∞–∑–≤–∞": "–õ—ñ—Å–æ–≤–∞ –ø—ñ—Å–Ω—è",
                    "–∞–≤—Ç–æ—Ä": "–õ–µ—Å—è –£–∫—Ä–∞—ó–Ω–∫–∞",
                    "—Ä—ñ–∫": 1911,
                    "–Ω–∞—è–≤–Ω—ñ—Å—Ç—å": True
                },
                {
                    "–Ω–∞–∑–≤–∞": "–ó–∞—Ö–∞—Ä –ë–µ—Ä–∫—É—Ç",
                    "–∞–≤—Ç–æ—Ä": "–Ü–≤–∞–Ω –§—Ä–∞–Ω–∫–æ",
                    "—Ä—ñ–∫": 1883,
                    "–Ω–∞—è–≤–Ω—ñ—Å—Ç—å": False
                },
                {
                    "–Ω–∞–∑–≤–∞": "–¢—ñ–Ω—ñ –∑–∞–±—É—Ç–∏—Ö –ø—Ä–µ–¥–∫—ñ–≤",
                    "–∞–≤—Ç–æ—Ä": "–ú–∏—Ö–∞–π–ª–æ –ö–æ—Ü—é–±–∏–Ω—Å—å–∫–∏–π",
                    "—Ä—ñ–∫": 1913,
                    "–Ω–∞—è–≤–Ω—ñ—Å—Ç—å": True
                },
                {
                    "–Ω–∞–∑–≤–∞": "–ï–Ω–µ—ó–¥–∞",
                    "–∞–≤—Ç–æ—Ä": "–Ü–≤–∞–Ω –ö–æ—Ç–ª—è—Ä–µ–≤—Å—å–∫–∏–π",
                    "—Ä—ñ–∫": 1798,
                    "–Ω–∞—è–≤–Ω—ñ—Å—Ç—å": False
                }
            ]

            self.save_books_to_file(initial_books)
            print(f"‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ñ–∞–π–ª {self.file_path}")

    def load_books(self) -> None:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–Ω–∏–≥–∏ –∑ JSON —Ñ–∞–π–ª—É.

        Raises:
            FileNotFoundError: –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            json.JSONDecodeError: –Ø–∫—â–æ —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON
        """
        try:
            with open(self.file_path, 'r', encoding='utf-8') as file:
                books_data = json.load(file)
                self.books = [Book.from_dict(book_data) for book_data in books_data]
            print(f"‚úì –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.books)} –∫–Ω–∏–≥ –∑ {self.file_path}")

        except FileNotFoundError:
            print(f"‚úó –§–∞–π–ª {self.file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            self.books = []
        except json.JSONDecodeError as e:
            print(f"‚úó –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è JSON: {e}")
            self.books = []
        except KeyError as e:
            print(f"‚úó –í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ –≤ JSON: {e}")
            self.books = []

    def save_books(self) -> None:
        """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —É JSON —Ñ–∞–π–ª."""
        books_data = [book.to_dict() for book in self.books]
        self.save_books_to_file(books_data)

    def save_books_to_file(self, books_data: List[Dict[str, Any]]) -> None:
        """
        –ó–±–µ—Ä—ñ–≥–∞—î —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —É JSON —Ñ–∞–π–ª.

        Args:
            books_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏ –∫–Ω–∏–≥
        """
        try:
            with open(self.file_path, 'w', encoding='utf-8') as file:
                json.dump(books_data, file, ensure_ascii=False, indent=2)
            print(f"‚úì –ö–Ω–∏–≥–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {self.file_path}")
        except IOError as e:
            print(f"‚úó –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")

    def get_available_books(self) -> List[Book]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥ (–Ω–∞—è–≤–Ω—ñ—Å—Ç—å = True).

        Returns:
            List[Book]: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥
        """
        return [book for book in self.books if book.–Ω–∞—è–≤–Ω—ñ—Å—Ç—å]

    def display_available_books(self) -> None:
        """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥."""
        available_books = self.get_available_books()

        if not available_books:
            print("üìö –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥ —É –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ")
            return

        print(f"\nüìö –î–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏ ({len(available_books)} —à—Ç.):")
        print("=" * 60)
        for i, book in enumerate(available_books, 1):
            print(f"{i}. {book}")

    def display_all_books(self) -> None:
        """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∫–Ω–∏–≥."""
        if not self.books:
            print("üìö –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –ø–æ—Ä–æ–∂–Ω—è")
            return

        print(f"\nüìö –£—Å—ñ –∫–Ω–∏–≥–∏ ({len(self.books)} —à—Ç.):")
        print("=" * 60)
        for i, book in enumerate(self.books, 1):
            print(f"{i}. {book}")

    def add_book(self, –Ω–∞–∑–≤–∞: str, –∞–≤—Ç–æ—Ä: str, —Ä—ñ–∫: int, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å: bool = True) -> None:
        """
        –î–æ–¥–∞—î –Ω–æ–≤—É –∫–Ω–∏–≥—É –≤ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É.

        Args:
            –Ω–∞–∑–≤–∞: –ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏
            –∞–≤—Ç–æ—Ä: –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
            —Ä—ñ–∫: –†—ñ–∫ –≤–∏–¥–∞–Ω–Ω—è
            –Ω–∞—è–≤–Ω—ñ—Å—Ç—å: –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–∏–≥–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º True)
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î —Ç–∞–∫–∞ –∫–Ω–∏–≥–∞
        for book in self.books:
            if book.–Ω–∞–∑–≤–∞.lower() == –Ω–∞–∑–≤–∞.lower() and book.–∞–≤—Ç–æ—Ä.lower() == –∞–≤—Ç–æ—Ä.lower():
                print(f"‚ö†Ô∏è  –ö–Ω–∏–≥–∞ '{–Ω–∞–∑–≤–∞}' –≤—ñ–¥ {–∞–≤—Ç–æ—Ä} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ")
                return

        new_book = Book(–Ω–∞–∑–≤–∞, –∞–≤—Ç–æ—Ä, —Ä—ñ–∫, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å)
        self.books.append(new_book)
        self.save_books()

        print(f"‚úì –î–æ–¥–∞–Ω–æ –Ω–æ–≤—É –∫–Ω–∏–≥—É: {new_book}")

    def find_books_by_author(self, –∞–≤—Ç–æ—Ä: str) -> List[Book]:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–Ω–∏–≥–∏ –∑–∞ –∞–≤—Ç–æ—Ä–æ–º.

        Args:
            –∞–≤—Ç–æ—Ä: –Ü–º'—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ—à—É–∫—É

        Returns:
            List[Book]: –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
        """
        return [book for book in self.books if –∞–≤—Ç–æ—Ä.lower() in book.–∞–≤—Ç–æ—Ä.lower()]

    def find_books_by_title(self, –Ω–∞–∑–≤–∞: str) -> List[Book]:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–Ω–∏–≥–∏ –∑–∞ –Ω–∞–∑–≤–æ—é.

        Args:
            –Ω–∞–∑–≤–∞: –ù–∞–∑–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É

        Returns:
            List[Book]: –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—é –Ω–∞–∑–≤–æ—é
        """
        return [book for book in self.books if –Ω–∞–∑–≤–∞.lower() in book.–Ω–∞–∑–≤–∞.lower()]

    def update_book_availability(self, –Ω–∞–∑–≤–∞: str, –∞–≤—Ç–æ—Ä: str, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å: bool) -> bool:
        """
        –û–Ω–æ–≤–ª—é—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∫–Ω–∏–≥–∏.

        Args:
            –Ω–∞–∑–≤–∞: –ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏
            –∞–≤—Ç–æ—Ä: –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
            –Ω–∞—è–≤–Ω—ñ—Å—Ç—å: –ù–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å

        Returns:
            bool: True, —è–∫—â–æ –∫–Ω–∏–≥—É –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ
        """
        for book in self.books:
            if book.–Ω–∞–∑–≤–∞.lower() == –Ω–∞–∑–≤–∞.lower() and book.–∞–≤—Ç–æ—Ä.lower() == –∞–≤—Ç–æ—Ä.lower():
                old_status = book.–Ω–∞—è–≤–Ω—ñ—Å—Ç—å
                book.–Ω–∞—è–≤–Ω—ñ—Å—Ç—å = –Ω–∞—è–≤–Ω—ñ—Å—Ç—å
                self.save_books()

                status_text = "–¥–æ—Å—Ç—É–ø–Ω–æ—é" if –Ω–∞—è–≤–Ω—ñ—Å—Ç—å else "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—é"
                print(f"‚úì –ö–Ω–∏–≥–∞ '{–Ω–∞–∑–≤–∞}' —Ç–µ–ø–µ—Ä {status_text}")
                return True

        print(f"‚úó –ö–Ω–∏–≥—É '{–Ω–∞–∑–≤–∞}' –≤—ñ–¥ {–∞–≤—Ç–æ—Ä} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False


def interactive_menu() -> None:
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é."""
    library = LibraryManager()

    while True:
        print("\n" + "=" * 50)
        print("üèõÔ∏è  –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ë–Ü–ë–õ–Ü–û–¢–ï–ö–û–Æ")
        print("=" * 50)
        print("1. –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏")
        print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–Ω–∏–≥–∏")
        print("3. –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∫–Ω–∏–≥—É")
        print("4. –ó–Ω–∞–π—Ç–∏ –∫–Ω–∏–≥–∏ –∑–∞ –∞–≤—Ç–æ—Ä–æ–º")
        print("5. –ó–Ω–∞–π—Ç–∏ –∫–Ω–∏–≥–∏ –∑–∞ –Ω–∞–∑–≤–æ—é")
        print("6. –ó–º—ñ–Ω–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∫–Ω–∏–≥–∏")
        print("7. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É")
        print("0. –í–∏–π—Ç–∏")
        print("-" * 50)

        choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

        if choice == "1":
            library.display_available_books()

        elif choice == "2":
            library.display_all_books()

        elif choice == "3":
            print("\n‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–Ω–∏–≥–∏:")
            –Ω–∞–∑–≤–∞ = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏: ").strip()
            –∞–≤—Ç–æ—Ä = input("–í–≤–µ–¥—ñ—Ç—å –∞–≤—Ç–æ—Ä–∞: ").strip()

            try:
                —Ä—ñ–∫ = int(input("–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–¥–∞–Ω–Ω—è: ").strip())
                –¥–æ—Å—Ç—É–ø–Ω–∞ = input("–ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–∏–≥–∞? (y/n): ").strip().lower()
                –Ω–∞—è–≤–Ω—ñ—Å—Ç—å = –¥–æ—Å—Ç—É–ø–Ω–∞ in ['y', 'yes', '—Ç–∞–∫', '—Ç', '1']

                library.add_book(–Ω–∞–∑–≤–∞, –∞–≤—Ç–æ—Ä, —Ä—ñ–∫, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å)
            except ValueError:
                print("‚úó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä—ñ–∫ –≤–∏–¥–∞–Ω–Ω—è")

        elif choice == "4":
            –∞–≤—Ç–æ—Ä = input("\nüîç –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ—à—É–∫—É: ").strip()
            books = library.find_books_by_author(–∞–≤—Ç–æ—Ä)

            if books:
                print(f"\nüìñ –ó–Ω–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞ '{–∞–≤—Ç–æ—Ä}':")
                for i, book in enumerate(books, 1):
                    print(f"{i}. {book}")
            else:
                print(f"üì≠ –ö–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞ '{–∞–≤—Ç–æ—Ä}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        elif choice == "5":
            –Ω–∞–∑–≤–∞ = input("\nüîç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –ø–æ—à—É–∫—É: ").strip()
            books = library.find_books_by_title(–Ω–∞–∑–≤–∞)

            if books:
                print(f"\nüìñ –ó–Ω–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –∑ –Ω–∞–∑–≤–æ—é '{–Ω–∞–∑–≤–∞}':")
                for i, book in enumerate(books, 1):
                    print(f"{i}. {book}")
            else:
                print(f"üì≠ –ö–Ω–∏–≥ –∑ –Ω–∞–∑–≤–æ—é '{–Ω–∞–∑–≤–∞}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        elif choice == "6":
            print("\nüîÑ –ó–º—ñ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –∫–Ω–∏–≥–∏:")
            –Ω–∞–∑–≤–∞ = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏: ").strip()
            –∞–≤—Ç–æ—Ä = input("–í–≤–µ–¥—ñ—Ç—å –∞–≤—Ç–æ—Ä–∞: ").strip()
            –¥–æ—Å—Ç—É–ø–Ω–∞ = input("–ó—Ä–æ–±–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—é? (y/n): ").strip().lower()
            –Ω–∞—è–≤–Ω—ñ—Å—Ç—å = –¥–æ—Å—Ç—É–ø–Ω–∞ in ['y', 'yes', '—Ç–∞–∫', '—Ç', '1']

            library.update_book_availability(–Ω–∞–∑–≤–∞, –∞–≤—Ç–æ—Ä, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å)

        elif choice == "7":
            library.load_books()

        elif choice == "0":
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break

        else:
            print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")


def demo_usage() -> None:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏."""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –†–û–ë–û–¢–ò –°–ò–°–¢–ï–ú–ò")
    print("=" * 40)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
    library = LibraryManager("demo_books.json")

    # –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥
    print("\n1Ô∏è‚É£ –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏:")
    library.display_available_books()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–Ω–∏–≥–∏
    print("\n2Ô∏è‚É£ –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–Ω–∏–≥—É:")
    library.add_book("–ú–∞—Ä—É—Å—è –ß—É—Ä–∞–π", "–õ—ñ–Ω–∞ –ö–æ—Å—Ç–µ–Ω–∫–æ", 1979, True)

    # –ü–æ–∫–∞–∑ —É—Å—ñ—Ö –∫–Ω–∏–≥
    print("\n3Ô∏è‚É£ –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∫–Ω–∏–≥–∏ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:")
    library.display_all_books()

    # –ü–æ—à—É–∫ –∑–∞ –∞–≤—Ç–æ—Ä–æ–º
    print("\n4Ô∏è‚É£ –®—É–∫–∞—î–º–æ –∫–Ω–∏–≥–∏ –õ—ñ–Ω–∏ –ö–æ—Å—Ç–µ–Ω–∫–æ:")
    books_by_author = library.find_books_by_author("–õ—ñ–Ω–∞ –ö–æ—Å—Ç–µ–Ω–∫–æ")
    for book in books_by_author:
        print(f"  üìñ {book}")

    # –ó–º—ñ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
    print("\n5Ô∏è‚É£ –ó–º—ñ–Ω—é—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∫–Ω–∏–≥–∏:")
    library.update_book_availability("–ó–∞—Ö–∞—Ä –ë–µ—Ä–∫—É—Ç", "–Ü–≤–∞–Ω –§—Ä–∞–Ω–∫–æ", True)

    print("\n6Ô∏è‚É£ –û—Å—Ç–∞—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥:")
    library.display_available_books()


if __name__ == "__main__":
    print("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:")
    print("1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è")
    print("2. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é")

    mode = input("–í–∞—à –≤–∏–±—ñ—Ä (1/2): ").strip()

    if mode == "1":
        demo_usage()
    else:
        interactive_menu()