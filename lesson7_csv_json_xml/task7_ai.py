import csv
import json
import xml.etree.ElementTree as ET
from xml.dom import minidom

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
people_data = [
    {"first_name": "–Ü–≤–∞–Ω", "last_name": "–ü–µ—Ç—Ä–µ–Ω–∫–æ", "age": 25},
    {"first_name": "–ú–∞—Ä—ñ—è", "last_name": "–ö–æ–≤–∞–ª–µ–Ω–∫–æ", "age": 30},
    {"first_name": "–û–ª–µ–∫—Å—ñ–π", "last_name": "–®–µ–≤—á–µ–Ω–∫–æ", "age": 28},
    {"first_name": "–ê–Ω–Ω–∞", "last_name": "–ú–µ–ª—å–Ω–∏–∫", "age": 22},
    {"first_name": "–î–º–∏—Ç—Ä–æ", "last_name": "–Ü–≤–∞–Ω–µ–Ω–∫–æ", "age": 35}
]


# ==================== –ó–ê–ü–ò–°–¨ –í CSV ====================

def write_to_csv():
    print("=== –ó–ê–ü–ò–°–¨ –í CSV ===")

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DictWriter
    with open("people.csv", "w", newline="", encoding="utf-8") as csvfile:
        fieldnames = ["first_name", "last_name", "age"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerows(people_data)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏

    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ people.csv")

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—ã—á–Ω–æ–≥–æ writer
    with open("people_simple.csv", "w", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        writer.writerow(["–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–í–æ–∑—Ä–∞—Å—Ç"])

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for person in people_data:
            writer.writerow([person["first_name"], person["last_name"], person["age"]])

    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ people_simple.csv")


# ==================== –ó–ê–ü–ò–°–¨ –í JSON ====================

def write_to_json():
    print("\n=== –ó–ê–ü–ò–°–¨ –í JSON ===")

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å
    with open("people.json", "w", encoding="utf-8") as jsonfile:
        json.dump(people_data, jsonfile, ensure_ascii=False, indent=4)

    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ people.json")

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
    structured_data = {
        "people": people_data,
        "total_count": len(people_data),
        "created_at": "2024-01-01"
    }

    with open("people_structured.json", "w", encoding="utf-8") as jsonfile:
        json.dump(structured_data, jsonfile, ensure_ascii=False, indent=2)

    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ people_structured.json")


# ==================== –ó–ê–ü–ò–°–¨ –í XML ====================

def write_to_xml():
    print("\n=== –ó–ê–ü–ò–°–¨ –í XML ===")

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    root = ET.Element("people")

    for person_data in people_data:
        person = ET.SubElement(root, "person")

        first_name = ET.SubElement(person, "first_name")
        first_name.text = person_data["first_name"]

        last_name = ET.SubElement(person, "last_name")
        last_name.text = person_data["last_name"]

        age = ET.SubElement(person, "age")
        age.text = str(person_data["age"])

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    tree = ET.ElementTree(root)
    tree.write("people.xml", encoding="utf-8", xml_declaration=True)
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ people.xml")

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –° –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    rough_string = ET.tostring(root, encoding='unicode')
    reparsed = minidom.parseString(rough_string)
    pretty_xml = reparsed.toprettyxml(indent="  ")

    with open("people_pretty.xml", "w", encoding="utf-8") as xmlfile:
        xmlfile.write(pretty_xml)

    print("‚úÖ –ö—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ people_pretty.xml")

    # –í–∞—Ä–∏–∞–Ω—Ç 3: –° –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    root_with_attrs = ET.Element("people")

    for i, person_data in enumerate(people_data, 1):
        person = ET.SubElement(root_with_attrs, "person", id=str(i))
        person.set("full_name", f"{person_data['first_name']} {person_data['last_name']}")

        ET.SubElement(person, "first_name").text = person_data["first_name"]
        ET.SubElement(person, "last_name").text = person_data["last_name"]
        ET.SubElement(person, "age").text = str(person_data["age"])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    rough_string = ET.tostring(root_with_attrs, encoding='unicode')
    reparsed = minidom.parseString(rough_string)
    pretty_xml = reparsed.toprettyxml(indent="  ")

    with open("people_with_attributes.xml", "w", encoding="utf-8") as xmlfile:
        xmlfile.write(pretty_xml)

    print("‚úÖ XML —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –∑–∞–ø–∏—Å–∞–Ω –≤ people_with_attributes.xml")


# ==================== –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–• ====================

def read_csv():
    print("\n=== –ß–¢–ï–ù–ò–ï CSV ===")
    try:
        with open("people.csv", "r", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                print(f"–ò–º—è: {row['first_name']}, –§–∞–º–∏–ª–∏—è: {row['last_name']}, –í–æ–∑—Ä–∞—Å—Ç: {row['age']}")
    except FileNotFoundError:
        print("–§–∞–π–ª people.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")


def read_json():
    print("\n=== –ß–¢–ï–ù–ò–ï JSON ===")
    try:
        with open("people.json", "r", encoding="utf-8") as jsonfile:
            data = json.load(jsonfile)
            for person in data:
                print(f"–ò–º—è: {person['first_name']}, –§–∞–º–∏–ª–∏—è: {person['last_name']}, –í–æ–∑—Ä–∞—Å—Ç: {person['age']}")
    except FileNotFoundError:
        print("–§–∞–π–ª people.json –Ω–µ –Ω–∞–π–¥–µ–Ω")


def read_xml():
    print("\n=== –ß–¢–ï–ù–ò–ï XML ===")
    try:
        tree = ET.parse("people.xml")
        root = tree.getroot()

        for person in root.findall("person"):
            first_name = person.find("first_name").text
            last_name = person.find("last_name").text
            age = person.find("age").text
            print(f"–ò–º—è: {first_name}, –§–∞–º–∏–ª–∏—è: {last_name}, –í–æ–∑—Ä–∞—Å—Ç: {age}")
    except FileNotFoundError:
        print("–§–∞–π–ª people.xml –Ω–µ –Ω–∞–π–¥–µ–Ω")


# ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def add_person_to_files(first_name, last_name, age):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    print(f"\n=== –î–û–ë–ê–í–õ–ï–ù–ò–ï: {first_name} {last_name}, {age} –ª–µ—Ç ===")

    new_person = {"first_name": first_name, "last_name": last_name, "age": age}

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ CSV
    with open("people.csv", "a", newline="", encoding="utf-8") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=["first_name", "last_name", "age"])
        writer.writerow(new_person)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ JSON
    try:
        with open("people.json", "r", encoding="utf-8") as jsonfile:
            data = json.load(jsonfile)
    except FileNotFoundError:
        data = []

    data.append(new_person)

    with open("people.json", "w", encoding="utf-8") as jsonfile:
        json.dump(data, jsonfile, ensure_ascii=False, indent=4)

    print("‚úÖ –ù–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ CSV –∏ JSON")


def get_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"""
    print("\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")

    ages = [person["age"] for person in people_data]

    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {len(people_data)}")
    print(f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {sum(ages) / len(ages):.1f}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {min(ages)}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {max(ages)}")


# ==================== –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´ ====================

if __name__ == "__main__":
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    write_to_csv()
    write_to_json()
    write_to_xml()

    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
    read_csv()
    read_json()
    read_xml()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    add_person_to_files("–ü–µ—Ç—Ä–æ", "–°–∏–¥–æ—Ä–µ–Ω–∫–æ", 27)
    get_statistics()

    print("\nüéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")