#  –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:
#
# –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É - –≤–æ–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
# –°—Ç–≤–æ—Ä—ñ—Ç—å –≤–ª–∞—Å–Ω—ñ —Ñ–∞–π–ª–∏ –∑ –¥–∞–Ω–∏–º–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV/JSON/XML
# –ü—Ä–æ–≥—Ä–∞–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞–π–¥–µ —Ç–∞ –æ–±—Ä–æ–±–ª—è—Ç–∏–º–µ –≤–∞—à—ñ —Ñ–∞–π–ª–∏
# –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ –Ω–æ–≤—ñ —Ñ–∞–π–ª–∏

import json
import csv
import xml.etree.ElementTree as ET
from io import StringIO
from abc import ABC, abstractmethod
from typing import List, Dict, Any
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# ======================================
# –ß–ê–°–¢–ò–ù–ê 1: –°–ò–°–¢–ï–ú–ê –í–Ü–î–ü–†–ê–í–ö–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
# ======================================

# –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å MessageSender
class MessageSender(ABC):
    @abstractmethod
    def send_message(self, message: str):
        pass


# –Ü—Å–Ω—É—é—á—ñ –∫–ª–∞—Å–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
class SMSService:
    def send_sms(self, phone_number: str, message: str):
        print(f"üì± –í—ñ–¥–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ {phone_number}: {message}")
        # –°–∏–º—É–ª—è—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—ó –ø–æ–º–∏–ª–∫–∏
        if not phone_number.startswith('+'):
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É")


class EmailService:
    def send_email(self, email_address: str, message: str):
        print(f"üìß –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Email –Ω–∞ {email_address}: {message}")
        # –°–∏–º—É–ª—è—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—ó –ø–æ–º–∏–ª–∫–∏
        if '@' not in email_address:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∏")


class PushService:
    def send_push(self, device_id: str, message: str):
        print(f"üì≤ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Push-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –ø—Ä–∏—Å—Ç—Ä—ñ–π {device_id}: {message}")
        # –°–∏–º—É–ª—è—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—ó –ø–æ–º–∏–ª–∫–∏
        if len(device_id) < 5:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–∏—Å—Ç—Ä–æ—é")


# –ê–¥–∞–ø—Ç–µ—Ä–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
class SMSAdapter(MessageSender):
    def __init__(self, sms_service: SMSService, phone_number: str):
        self.sms_service = sms_service
        self.phone_number = phone_number

    def send_message(self, message: str):
        try:
            self.sms_service.send_sms(self.phone_number, message)
            logger.info(f"SMS —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {self.phone_number}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ SMS –Ω–∞ {self.phone_number}: {e}")
            raise


class EmailAdapter(MessageSender):
    def __init__(self, email_service: EmailService, email_address: str):
        self.email_service = email_service
        self.email_address = email_address

    def send_message(self, message: str):
        try:
            self.email_service.send_email(self.email_address, message)
            logger.info(f"Email —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {self.email_address}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Email –Ω–∞ {self.email_address}: {e}")
            raise


class PushAdapter(MessageSender):
    def __init__(self, push_service: PushService, device_id: str):
        self.push_service = push_service
        self.device_id = device_id

    def send_message(self, message: str):
        try:
            self.push_service.send_push(self.device_id, message)
            logger.info(f"Push-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {self.device_id}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Push –Ω–∞ {self.device_id}: {e}")
            raise


# –°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤
class MessageBroadcaster:
    def __init__(self, adapters: List[MessageSender]):
        self.adapters = adapters

    def broadcast_message(self, message: str):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏"""
        successful_sends = 0
        failed_sends = 0

        for adapter in self.adapters:
            try:
                adapter.send_message(message)
                successful_sends += 1
            except Exception as e:
                failed_sends += 1
                continue

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Å–∏–ª–∫–∏:")
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_sends}")
        print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {failed_sends}")


# ======================================
# –ß–ê–°–¢–ò–ù–ê 2: –ü–ï–†–ï–¢–í–û–†–ï–ù–ù–Ø –§–û–†–ú–ê–¢–Ü–í –§–ê–ô–õ–Ü–í
# ======================================

class DataConverter(ABC):
    @abstractmethod
    def convert(self, data: str) -> str:
        pass


# –Ü—Å–Ω—É—é—á—ñ –∫–ª–∞—Å–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
class CSVProcessor:
    def parse_csv(self, csv_data: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç—å CSV –¥–∞–Ω—ñ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤"""
        reader = csv.DictReader(StringIO(csv_data))
        return list(reader)

    def create_csv(self, data: List[Dict[str, Any]]) -> str:
        """–°—Ç–≤–æ—Ä—é—î CSV —Å—Ç—Ä–æ–∫—É –∑ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–Ω–∏–∫—ñ–≤"""
        if not data:
            return ""

        output = StringIO()
        fieldnames = data[0].keys()
        writer = csv.DictWriter(output, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)
        return output.getvalue()


class JSONProcessor:
    def parse_json(self, json_data: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω—ñ"""
        return json.loads(json_data)

    def create_json(self, data: List[Dict[str, Any]]) -> str:
        """–°—Ç–≤–æ—Ä—é—î JSON —Å—Ç—Ä–æ–∫—É"""
        return json.dumps(data, ensure_ascii=False, indent=2)


class XMLProcessor:
    def parse_xml(self, xml_data: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç—å XML –¥–∞–Ω—ñ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤"""
        root = ET.fromstring(xml_data)
        result = []

        # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ XML –º–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
        for item in root:
            item_dict = {}
            if item.text and item.text.strip():
                item_dict['text'] = item.text.strip()

            # –î–æ–¥–∞—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏
            item_dict.update(item.attrib)

            # –î–æ–¥–∞—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            for child in item:
                if child.text and child.text.strip():
                    item_dict[child.tag] = child.text.strip()
                if child.attrib:
                    for attr, value in child.attrib.items():
                        item_dict[f"{child.tag}_{attr}"] = value

            result.append(item_dict)

        return result


# –ê–¥–∞–ø—Ç–µ—Ä–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—ñ–≤
class CSVToJSONAdapter(DataConverter):
    def __init__(self):
        self.csv_processor = CSVProcessor()
        self.json_processor = JSONProcessor()

    def convert(self, csv_data: str) -> str:
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î CSV –≤ JSON"""
        try:
            parsed_data = self.csv_processor.parse_csv(csv_data)
            return self.json_processor.create_json(parsed_data)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è CSV –≤ JSON: {e}")
            raise


class JSONToCSVAdapter(DataConverter):
    def __init__(self):
        self.json_processor = JSONProcessor()
        self.csv_processor = CSVProcessor()

    def convert(self, json_data: str) -> str:
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î JSON –≤ CSV"""
        try:
            parsed_data = self.json_processor.parse_json(json_data)
            return self.csv_processor.create_csv(parsed_data)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON –≤ CSV: {e}")
            raise


class XMLToJSONAdapter(DataConverter):
    def __init__(self):
        self.xml_processor = XMLProcessor()
        self.json_processor = JSONProcessor()

    def convert(self, xml_data: str) -> str:
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î XML –≤ JSON"""
        try:
            parsed_data = self.xml_processor.parse_xml(xml_data)
            return self.json_processor.create_json(parsed_data)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è XML –≤ JSON: {e}")
            raise


# ======================================
# –†–û–ë–û–¢–ê –ó –¢–ï–°–¢–û–í–ò–ú–ò –§–ê–ô–õ–ê–ú–ò
# ======================================

class TestDataLoader:
    """–ö–ª–∞—Å –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—ñ–≤"""

    @staticmethod
    def load_test_data(filename: str) -> str:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É"""
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                return file.read()
        except FileNotFoundError:
            logger.warning(f"–§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ.")
            return TestDataLoader.get_fallback_data(filename)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É {filename}: {e}")
            return TestDataLoader.get_fallback_data(filename)

    @staticmethod
    def get_fallback_data(filename: str) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"""
        fallback_data = {
            'test_data.csv': """name,age,city
–Ü–≤–∞–Ω,25,–ö–∏—ó–≤
–ú–∞—Ä—ñ—è,30,–õ—å–≤—ñ–≤
–ü–µ—Ç—Ä–æ,35,–û–¥–µ—Å–∞""",

            'test_data.json': """[
  {"name": "–ê–Ω–Ω–∞", "age": 28, "city": "–•–∞—Ä–∫—ñ–≤"},
  {"name": "–û–ª–µ–≥", "age": 32, "city": "–î–Ω—ñ–ø—Ä–æ"}
]""",

            'test_data.xml': """<?xml version="1.0" encoding="UTF-8"?>
<people>
    <person>
        <name>–°–≤—ñ—Ç–ª–∞–Ω–∞</name>
        <age>27</age>
        <city>–ü–æ–ª—Ç–∞–≤–∞</city>
    </person>
    <person>
        <name>–ú–∞–∫—Å–∏–º</name>
        <age>33</age>
        <city>–í—ñ–Ω–Ω–∏—Ü—è</city>
    </person>
</people>"""
        }
        return fallback_data.get(filename, "")

    @staticmethod
    def create_test_files():
        """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –∑ –¥–∞–Ω–∏–º–∏"""
        test_files = {
            'test_data.csv': """name,age,city
–Ü–≤–∞–Ω,25,–ö–∏—ó–≤
–ú–∞—Ä—ñ—è,30,–õ—å–≤—ñ–≤
–ü–µ—Ç—Ä–æ,35,–û–¥–µ—Å–∞
–û–ª–µ–∫—Å–∞–Ω–¥—Ä,28,–ó–∞–ø–æ—Ä—ñ–∂–∂—è
–ö–∞—Ç–µ—Ä–∏–Ω–∞,31,–ß–µ—Ä–Ω—ñ–≤—Ü—ñ""",

            'test_data.json': """[
  {"name": "–ê–Ω–Ω–∞", "age": 28, "city": "–•–∞—Ä–∫—ñ–≤"},
  {"name": "–û–ª–µ–≥", "age": 32, "city": "–î–Ω—ñ–ø—Ä–æ"},
  {"name": "–¢–µ—Ç—è–Ω–∞", "age": 26, "city": "–°—É–º–∏"},
  {"name": "–í—ñ–∫—Ç–æ—Ä", "age": 29, "city": "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π"}
]""",

            'test_data.xml': """<?xml version="1.0" encoding="UTF-8"?>
<people>
    <person id="1">
        <name>–°–≤—ñ—Ç–ª–∞–Ω–∞</name>
        <age>27</age>
        <city>–ü–æ–ª—Ç–∞–≤–∞</city>
        <profession>–í—á–∏—Ç–µ–ª—å</profession>
    </person>
    <person id="2">
        <name>–ú–∞–∫—Å–∏–º</name>
        <age>33</age>
        <city>–í—ñ–Ω–Ω–∏—Ü—è</city>
        <profession>–Ü–Ω–∂–µ–Ω–µ—Ä</profession>
    </person>
    <person id="3">
        <name>–û–ª—å–≥–∞</name>
        <age>24</age>
        <city>–õ—É—Ü—å–∫</city>
        <profession>–î–∏–∑–∞–π–Ω–µ—Ä</profession>
    </person>
</people>"""
        }

        for filename, content in test_files.items():
            try:
                with open(filename, 'w', encoding='utf-8') as file:
                    file.write(content)
                print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª: {filename}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É {filename}: {e}")


# ======================================
# –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø
# ======================================

def demo_messaging_system():
    print("=" * 50)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –°–ò–°–¢–ï–ú–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨")
    print("=" * 50)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
    sms_service = SMSService()
    email_service = EmailService()
    push_service = PushService()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–µ—Ä—ñ–≤
    sms_adapter = SMSAdapter(sms_service, "+380123456789")
    email_adapter = EmailAdapter(email_service, "user@example.com")
    push_adapter = PushAdapter(push_service, "device123456")

    # –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω –ê–¥–∞–ø—Ç–µ—Ä."

    print("\n1. –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–∂–µ–Ω –∞–¥–∞–ø—Ç–µ—Ä:")
    print("-" * 50)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–∂–µ–Ω –∞–¥–∞–ø—Ç–µ—Ä –æ–∫—Ä–µ–º–æ
    try:
        sms_adapter.send_message(message)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ SMS: {e}")

    try:
        email_adapter.send_message(message)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ Email: {e}")

    try:
        push_adapter.send_message(message)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ Push: {e}")

    print("\n2. –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ —á–µ—Ä–µ–∑ MessageBroadcaster:")
    print("-" * 50)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
    broadcaster = MessageBroadcaster([sms_adapter, email_adapter, push_adapter])
    broadcaster.broadcast_message("–ú–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤!")

    print("\n3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫:")
    print("-" * 50)

    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    faulty_adapters = [
        SMSAdapter(sms_service, "123456789"),  # –ë–µ–∑ +
        EmailAdapter(email_service, "invalid-email"),  # –ë–µ–∑ @
        PushAdapter(push_service, "123")  # –ö–æ—Ä–æ—Ç–∫–∏–π ID
    ]

    faulty_broadcaster = MessageBroadcaster(faulty_adapters)
    faulty_broadcaster.broadcast_message("–¢–µ—Å—Ç –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")


def demo_file_conversion():
    print("\n\n" + "=" * 50)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ü–ï–†–ï–¢–í–û–†–ï–ù–ù–Ø –§–ê–ô–õ–Ü–í")
    print("=" * 50)

    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    csv_data = """name,age,city
–Ü–≤–∞–Ω,25,–ö–∏—ó–≤
–ú–∞—Ä—ñ—è,30,–õ—å–≤—ñ–≤
–ü–µ—Ç—Ä–æ,35,–û–¥–µ—Å–∞"""

    json_data = """[
  {"name": "–ê–Ω–Ω–∞", "age": 28, "city": "–•–∞—Ä–∫—ñ–≤"},
  {"name": "–û–ª–µ–≥", "age": 32, "city": "–î–Ω—ñ–ø—Ä–æ"}
]"""

    xml_data = """<?xml version="1.0" encoding="UTF-8"?>
<people>
    <person>
        <name>–°–≤—ñ—Ç–ª–∞–Ω–∞</name>
        <age>27</age>
        <city>–ü–æ–ª—Ç–∞–≤–∞</city>
    </person>
    <person>
        <name>–ú–∞–∫—Å–∏–º</name>
        <age>33</age>
        <city>–í—ñ–Ω–Ω–∏—Ü—è</city>
    </person>
</people>"""

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–µ—Ä—ñ–≤
    csv_to_json = CSVToJSONAdapter()
    json_to_csv = JSONToCSVAdapter()
    xml_to_json = XMLToJSONAdapter()

    print("\n1. –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è CSV –≤ JSON:")
    print("-" * 30)
    print("–ü–æ—á–∞—Ç–∫–æ–≤—ñ CSV –¥–∞–Ω—ñ:")
    print(csv_data)

    try:
        json_result = csv_to_json.convert(csv_data)
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç JSON:")
        print(json_result)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")

    print("\n2. –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON –≤ CSV:")
    print("-" * 30)
    print("–ü–æ—á–∞—Ç–∫–æ–≤—ñ JSON –¥–∞–Ω—ñ:")
    print(json_data)

    try:
        csv_result = json_to_csv.convert(json_data)
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç CSV:")
        print(csv_result)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")

    print("\n3. –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è XML –≤ JSON:")
    print("-" * 30)
    print("–ü–æ—á–∞—Ç–∫–æ–≤—ñ XML –¥–∞–Ω—ñ:")
    print(xml_data)

    try:
        json_from_xml = xml_to_json.convert(xml_data)
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç JSON:")
        print(json_from_xml)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π
    demo_messaging_system()
    demo_file_conversion()
    # demo_custom_data_files()

    print("\n\n" + "=" * 50)
    print("–°–¢–í–û–†–ï–ù–Ü –§–ê–ô–õ–ò")
    print("=" * 50)
    print("üìÅ –¢–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏:")
    print("   ‚îú‚îÄ‚îÄ test_data.csv")
    print("   ‚îú‚îÄ‚îÄ test_data.json")
    print("   ‚îî‚îÄ‚îÄ test_data.xml")
    print("\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:")
    print("   ‚îú‚îÄ‚îÄ converted_csv_to_json.json")
    print("   ‚îú‚îÄ‚îÄ converted_json_to_csv.csv")
    print("   ‚îî‚îÄ‚îÄ converted_xml_to_json.json")

    print("\n" + "=" * 50)
    print("–í–ò–°–ù–û–í–û–ö")
    print("=" * 50)
    print("–ü–∞—Ç—Ç–µ—Ä–Ω –ê–¥–∞–ø—Ç–µ—Ä —É—Å–ø—ñ—à–Ω–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è:")
    print("‚úÖ –£–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
    print("‚úÖ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–∂ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —Ñ–∞–π–ª—ñ–≤")
    print("‚úÖ –û–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è")
    print("‚úÖ –ú–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
    print("‚úÖ –†–æ–±–æ—Ç–∏ –∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –¥–∞–Ω–∏—Ö")
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤")