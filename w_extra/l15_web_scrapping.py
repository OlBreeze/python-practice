# –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∞—Ç–∏ –∑ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (http://books.toscrape.com/).–°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –æ–±—ñ–π—Ç–∏ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–∞—Ç–∞–ª–æ–≥—É (–¥–æ 50 —Å—Ç–æ—Ä—ñ–Ω–æ–∫). üöÄ–î–ª—è –∫–æ–∂–Ω–æ—ó –∫–Ω–∏–≥–∏ –Ω–∞ –∫–æ–∂–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑—ñ–±—Ä–∞—Ç–∏ —Ç–∞–∫—ñ –¥–∞–Ω—ñ:
# * –ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏ (Title).
# * –¶—ñ–Ω–∞ (Price, —É —Ñ—É–Ω—Ç–∞—Ö —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤).
# * –†–µ–π—Ç–∏–Ω–≥ (Rating, —É –≤–∏–≥–ª—è–¥—ñ —Å–ª—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Three", "Five").
# * –ù–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ (Availability ‚Äì –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π —Ç–µ–∫—Å—Ç "In stock").

from bs4 import BeautifulSoup
import requests
import time
import csv


def scrape_books_catalog(max_pages=5):
    """
    –ü–∞—Ä—Å–∏—Ç –∫–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥ —Å —Å–∞–π—Ç–∞ books.toscrape.com

    Args:
        max_pages: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–æ 50)

    Returns:
        list: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–Ω–∏–≥–∞—Ö
    """
    base_url = "http://books.toscrape.com/catalogue/page-{}.html"
    all_books = []

    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–Ω–∏–≥...\n")

    for page_num in range(1, max_pages + 1):
        url = base_url.format(page_num)

        try:
            print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}...")
            response = requests.get(url)

            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
            if response.status_code == 404:
                print(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num - 1}")
                break

            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–∏–≥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            books = soup.find_all('article', class_='product_pod')

            if not books:
                print(f"‚ö†Ô∏è –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
                break

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
            for book in books:
                # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
                title = book.h3.a['title']

                # –¶–µ–Ω–∞ (—É–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª ¬£ –∏ –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏)
                price_text = book.find('p', class_='price_color').text
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
                price = ''.join(char for char in price_text if char.isdigit() or char == '.')
                price = price.strip()

                # –†–µ–π—Ç–∏–Ω–≥ (–∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–ª–∞—Å—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä "Three")
                rating_class = book.find('p', class_='star-rating')
                rating = rating_class['class'][1]  # ['star-rating', 'Three']

                # –ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
                availability_tag = book.find('p', class_='instock availability')
                availability = availability_tag.text.strip()
                in_stock = "In stock" in availability

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
                book_data = {
                    'Title': title,
                    'Price': price,
                    'Rating': rating,
                    'Availability': 'In stock' if in_stock else 'Out of stock'
                }

                all_books.append(book_data)

            print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É)
            time.sleep(0.5)

        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {e}")
            break

    return all_books


def save_to_csv(books, filename='books_catalog.csv'):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–Ω–∏–≥–∞—Ö –≤ CSV —Ñ–∞–π–ª

    Args:
        books: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–Ω–∏–≥–∞—Ö
        filename: –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    if not books:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return

    with open(filename, 'w', newline='', encoding='utf-8') as f:
        fieldnames = ['Title', 'Price', 'Rating', 'Availability']
        writer = csv.DictWriter(f, fieldnames=fieldnames)

        writer.writeheader()
        writer.writerows(books)

    print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


def print_statistics(books):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
    if not books:
        return

    print("\n" + "=" * 60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)

    print(f"üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥ —Å–æ–±—Ä–∞–Ω–æ: {len(books)}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
    ratings = {}
    for book in books:
        rating = book['Rating']
        ratings[rating] = ratings.get(rating, 0) + 1

    print("\n‚≠ê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º:")
    rating_order = ['One', 'Two', 'Three', 'Four', 'Five']
    for rating in rating_order:
        count = ratings.get(rating, 0)
        if count > 0:
            print(f"   {rating}: {count} –∫–Ω–∏–≥")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é
    in_stock_count = sum(1 for book in books if book['Availability'] == 'In stock')
    print(f"\nüì¶ –í –Ω–∞–ª–∏—á–∏–∏: {in_stock_count} –∏–∑ {len(books)} –∫–Ω–∏–≥")

    # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
    prices = [float(book['Price']) for book in books]
    avg_price = sum(prices) / len(prices)
    min_price = min(prices)
    max_price = max(prices)

    print(f"\nüí∞ –¶–µ–Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ¬£{avg_price:.2f}")
    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ¬£{min_price:.2f}")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ¬£{max_price:.2f}")

    # –ü—Ä–∏–º–µ—Ä—ã –∫–Ω–∏–≥
    print(f"\nüìñ –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ (–ø–µ—Ä–≤—ã–µ 5):")
    for i, book in enumerate(books[:5], 1):
        print(f"\n   {i}. {book['Title'][:50]}...")
        print(f"      –¶–µ–Ω–∞: ¬£{book['Price']} | –†–µ–π—Ç–∏–Ω–≥: {book['Rating']} | {book['Availability']}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("  –ü–ê–†–°–ï–† –ö–ê–¢–ê–õ–û–ì–ê –ö–ù–ò–ì - books.toscrape.com")
    print("=" * 60)
    print()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ (–º–∞–∫—Å–∏–º—É–º 50 —Å—Ç—Ä–∞–Ω–∏—Ü)
    books = scrape_books_catalog(max_pages=50)

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_statistics(books)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    save_to_csv(books)

    print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("=" * 60)


if __name__ == "__main__":
    main()