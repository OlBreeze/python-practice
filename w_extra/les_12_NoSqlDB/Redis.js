// ============================================
// REDIS: –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –°–ï–°–Ü–Ø–ú–ò –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í
// ============================================

const redis = require('redis');
const crypto = require('crypto');

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ Redis
const client = redis.createClient({
  host: 'localhost',
  port: 6379
});

client.on('error', (err) => console.error('Redis Error:', err));
client.on('connect', () => console.log('‚úì –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Redis'));

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
function generateSessionToken() {
  return crypto.randomBytes(32).toString('hex');
}

// ============================================
// 1. –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –°–ï–°–Ü–ô –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í
// ============================================

class SessionManager {
  constructor(redisClient) {
    this.client = redisClient;
    this.SESSION_TTL = 1800; // 30 —Ö–≤–∏–ª–∏–Ω –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  }

  // ============================================
  // CREATE: –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é
  // ============================================
  async createSession(userId, userInfo = {}) {
    const sessionToken = generateSessionToken();
    const sessionKey = `session:${sessionToken}`;

    const sessionData = {
      user_id: userId,
      session_token: sessionToken,
      login_time: new Date().toISOString(),
      last_activity: new Date().toISOString(),
      ip_address: userInfo.ip || 'unknown',
      user_agent: userInfo.userAgent || 'unknown',
      ...userInfo
    };

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Å—ñ—é —è–∫ hash
    await this.client.hSet(sessionKey, sessionData);

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ TTL (—á–∞—Å –∂–∏—Ç—Ç—è)
    await this.client.expire(sessionKey, this.SESSION_TTL);

    // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –¥–æ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await this.client.sAdd(`user:${userId}:sessions`, sessionToken);

    console.log(`‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–µ—Å—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
    console.log(`  –¢–æ–∫–µ–Ω: ${sessionToken}`);
    console.log(`  TTL: ${this.SESSION_TTL} —Å–µ–∫—É–Ω–¥`);

    return sessionToken;
  }

  // ============================================
  // READ: –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é
  // ============================================
  async getSession(sessionToken) {
    const sessionKey = `session:${sessionToken}`;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Å–µ—Å—ñ—è
    const exists = await this.client.exists(sessionKey);
    if (!exists) {
      console.log(`‚úó –°–µ—Å—ñ—è ${sessionToken} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å`);
      return null;
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó
    const sessionData = await this.client.hGetAll(sessionKey);

    console.log(`‚úì –ó–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—ñ—é:`);
    console.log(`  User ID: ${sessionData.user_id}`);
    console.log(`  Login: ${sessionData.login_time}`);
    console.log(`  Last Activity: ${sessionData.last_activity}`);

    return sessionData;
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async getUserSessions(userId) {
    const sessionTokens = await this.client.sMembers(`user:${userId}:sessions`);

    console.log(`\n‚úì –ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}:`);
    const sessions = [];

    for (const token of sessionTokens) {
      const session = await this.getSession(token);
      if (session) {
        sessions.push(session);
      } else {
        // –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ—ñ—Å–Ω—É—é—á—ñ —Ç–æ–∫–µ–Ω–∏ –∑ –Ω–∞–±–æ—Ä—É
        await this.client.sRem(`user:${userId}:sessions`, token);
      }
    }

    return sessions;
  }

  // ============================================
  // UPDATE: –û–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
  // ============================================
  async updateActivity(sessionToken) {
    const sessionKey = `session:${sessionToken}`;

    const exists = await this.client.exists(sessionKey);
    if (!exists) {
      console.log(`‚úó –°–µ—Å—ñ—è ${sessionToken} –Ω–µ —ñ—Å–Ω—É—î`);
      return false;
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    await this.client.hSet(sessionKey, 'last_activity', new Date().toISOString());

    // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ TTL
    await this.client.expire(sessionKey, this.SESSION_TTL);

    console.log(`‚úì –û–Ω–æ–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–ª—è —Å–µ—Å—ñ—ó ${sessionToken.substring(0, 16)}...`);
    console.log(`  –ù–æ–≤–∏–π TTL: ${this.SESSION_TTL} —Å–µ–∫—É–Ω–¥`);

    return true;
  }

  // –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó
  async updateSessionData(sessionToken, updates) {
    const sessionKey = `session:${sessionToken}`;

    const exists = await this.client.exists(sessionKey);
    if (!exists) {
      console.log(`‚úó –°–µ—Å—ñ—è –Ω–µ —ñ—Å–Ω—É—î`);
      return false;
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª—è
    for (const [key, value] of Object.entries(updates)) {
      await this.client.hSet(sessionKey, key, value);
    }

    console.log(`‚úì –û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó ${sessionToken.substring(0, 16)}...`);
    return true;
  }

  // ============================================
  // DELETE: –í–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Å—ñ—é (logout)
  // ============================================
  async deleteSession(sessionToken) {
    const sessionKey = `session:${sessionToken}`;

    // –û—Ç—Ä–∏–º—É—î–º–æ user_id –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
    const userId = await this.client.hGet(sessionKey, 'user_id');

    // –í–∏–¥–∞–ª—è—î–º–æ —Å–µ—Å—ñ—é
    const deleted = await this.client.del(sessionKey);

    if (deleted && userId) {
      // –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–∫–µ–Ω –∑ –Ω–∞–±–æ—Ä—É —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      await this.client.sRem(`user:${userId}:sessions`, sessionToken);
      console.log(`‚úì –°–µ—Å—ñ—é ${sessionToken.substring(0, 16)}... –≤–∏–¥–∞–ª–µ–Ω–æ`);
      return true;
    }

    console.log(`‚úó –°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
    return false;
  }

  // –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async deleteAllUserSessions(userId) {
    const sessionTokens = await this.client.sMembers(`user:${userId}:sessions`);

    let deleted = 0;
    for (const token of sessionTokens) {
      const result = await this.deleteSession(token);
      if (result) deleted++;
    }

    console.log(`‚úì –í–∏–¥–∞–ª–µ–Ω–æ ${deleted} —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
    return deleted;
  }

  // ============================================
  // 3. TTL (Time to Live)
  // ============================================

  // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–ª–∏—à–∫–æ–≤–∏–π —á–∞—Å –∂–∏—Ç—Ç—è —Å–µ—Å—ñ—ó
  async getSessionTTL(sessionToken) {
    const sessionKey = `session:${sessionToken}`;
    const ttl = await this.client.ttl(sessionKey);

    if (ttl === -2) {
      console.log(`‚úó –°–µ—Å—ñ—è –Ω–µ —ñ—Å–Ω—É—î`);
      return null;
    }

    if (ttl === -1) {
      console.log(`‚ö† –°–µ—Å—ñ—è —ñ—Å–Ω—É—î, –∞–ª–µ –Ω–µ –º–∞—î TTL (–Ω–µ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)`);
      return -1;
    }

    const minutes = Math.floor(ttl / 60);
    const seconds = ttl % 60;
    console.log(`‚è± –ó–∞–ª–∏—à–æ–∫ —á–∞—Å—É —Å–µ—Å—ñ—ó: ${minutes}–º ${seconds}—Å`);

    return ttl;
  }

  // –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π TTL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ—Å—ñ—ó
  async setCustomTTL(sessionToken, ttlSeconds) {
    const sessionKey = `session:${sessionToken}`;
    const result = await this.client.expire(sessionKey, ttlSeconds);

    if (result) {
      console.log(`‚úì –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ TTL ${ttlSeconds}—Å –¥–ª—è —Å–µ—Å—ñ—ó`);
    } else {
      console.log(`‚úó –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ TTL (—Å–µ—Å—ñ—è –Ω–µ —ñ—Å–Ω—É—î)`);
    }

    return result;
  }

  // ============================================
  // –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á
  // ============================================

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π
  async getActiveSessionsCount() {
    const keys = await this.client.keys('session:*');
    console.log(`üìä –í—Å—å–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: ${keys.length}`);
    return keys.length;
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
  async getUserStats(userId) {
    const sessions = await this.getUserSessions(userId);
    const sessionCount = sessions.length;

    if (sessionCount === 0) {
      console.log(`üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –Ω–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π`);
      return null;
    }

    const loginTimes = sessions.map(s => new Date(s.login_time));
    const lastLogin = new Date(Math.max(...loginTimes));

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}:`);
    console.log(`  –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: ${sessionCount}`);
    console.log(`  –û—Å—Ç–∞–Ω–Ω—ñ–π –≤—Ö—ñ–¥: ${lastLogin.toISOString()}`);

    return {
      userId,
      sessionCount,
      lastLogin
    };
  }

  // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
  async clearAllSessions() {
    const sessionKeys = await this.client.keys('session:*');
    const userKeys = await this.client.keys('user:*:sessions');

    if (sessionKeys.length > 0) {
      await this.client.del(sessionKeys);
    }
    if (userKeys.length > 0) {
      await this.client.del(userKeys);
    }

    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${sessionKeys.length} —Å–µ—Å—ñ–π`);
  }
}

// ============================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –†–û–ë–û–¢–ò
// ============================================

async function demonstrateRedis() {
  await client.connect();

  const sessionManager = new SessionManager(client);

  console.log('\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –†–û–ë–û–¢–ò –ó REDIS ===\n');

  // –û—á–∏—â–µ–Ω–Ω—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
  await sessionManager.clearAllSessions();

  // 1. CREATE: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ–π
  console.log('\n--- 1. CREATE: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ–π ---');
  const token1 = await sessionManager.createSession('user123', {
    ip: '192.168.1.100',
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'
  });

  const token2 = await sessionManager.createSession('user123', {
    ip: '192.168.1.101',
    userAgent: 'Mobile Safari/15.0'
  });

  const token3 = await sessionManager.createSession('user456', {
    ip: '10.0.0.5',
    userAgent: 'Chrome/120.0'
  });

  // 2. READ: –ß–∏—Ç–∞–Ω–Ω—è —Å–µ—Å—ñ–π
  console.log('\n--- 2. READ: –ß–∏—Ç–∞–Ω–Ω—è —Å–µ—Å—ñ–π ---');
  await sessionManager.getSession(token1);

  console.log('\n--- –í—Å—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ user123 ---');
  await sessionManager.getUserSessions('user123');

  // 3. UPDATE: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
  console.log('\n--- 3. UPDATE: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ---');

  // –°–∏–º—É–ª—è—Ü—ñ—è –ø–∞—É–∑–∏
  await new Promise(resolve => setTimeout(resolve, 2000));

  await sessionManager.updateActivity(token1);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
  await sessionManager.updateSessionData(token1, {
    last_page: '/dashboard',
    cart_items: '3'
  });

  // 4. TTL: –†–æ–±–æ—Ç–∞ –∑ —á–∞—Å–æ–º –∂–∏—Ç—Ç—è
  console.log('\n--- 4. TTL: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –∂–∏—Ç—Ç—è ---');
  await sessionManager.getSessionTTL(token1);

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—à–æ–≥–æ TTL (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Remember me" - 7 –¥–Ω—ñ–≤)
  await sessionManager.setCustomTTL(token2, 7 * 24 * 60 * 60);
  await sessionManager.getSessionTTL(token2);

  // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n--- 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---');
  await sessionManager.getActiveSessionsCount();
  await sessionManager.getUserStats('user123');

  // 6. DELETE: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Å—ñ–π
  console.log('\n--- 6. DELETE: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Å—ñ–π ---');
  await sessionManager.deleteSession(token1);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
  await sessionManager.getSession(token1);

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (logout –Ω–∞ –≤—Å—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö)
  console.log('\n--- Logout –Ω–∞ –≤—Å—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö ---');
  await sessionManager.deleteAllUserSessions('user123');

  console.log('\n--- –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---');
  await sessionManager.getActiveSessionsCount();

  // 7. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ TTL
  console.log('\n--- 7. –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø AUTO-EXPIRE ---');
  console.log('–°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –∑ TTL 5 —Å–µ–∫—É–Ω–¥...');
  const shortToken = await sessionManager.createSession('user789', {
    ip: '127.0.0.1'
  });
  await sessionManager.setCustomTTL(shortToken, 5);

  console.log('–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è...');
  await sessionManager.getSession(shortToken);

  console.log('\n–ß–µ–∫–∞—î–º–æ 6 —Å–µ–∫—É–Ω–¥...');
  await new Promise(resolve => setTimeout(resolve, 6000));

  console.log('–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è TTL...');
  await sessionManager.getSession(shortToken);

  console.log('\n‚úì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è Redis –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  await client.quit();
}

// –ó–∞–ø—É—Å–∫
demonstrateRedis().catch(console.error);

// ============================================
// –î–û–î–ê–¢–ö–û–í–û: –ü–†–ò–ö–õ–ê–î –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –í EXPRESS
// ============================================

/*
const express = require('express');
const app = express();

const sessionManager = new SessionManager(client);

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó
async function authenticateSession(req, res, next) {
  const token = req.headers['authorization']?.replace('Bearer ', '');

  if (!token) {
    return res.status(401).json({ error: 'No session token' });
  }

  const session = await sessionManager.getSession(token);

  if (!session) {
    return res.status(401).json({ error: 'Invalid or expired session' });
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
  await sessionManager.updateActivity(token);

  // –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó –¥–æ request
  req.session = session;
  req.userId = session.user_id;

  next();
}

// Endpoint –¥–ª—è login
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;

  // –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ credentials
  const userId = 'user123'; // –æ—Ç—Ä–∏–º–∞–Ω–æ –ø—ñ—Å–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

  const token = await sessionManager.createSession(userId, {
    ip: req.ip,
    userAgent: req.get('user-agent')
  });

  res.json({ token });
});

// –ó–∞—Ö–∏—â–µ–Ω–∏–π endpoint
app.get('/api/profile', authenticateSession, async (req, res) => {
  res.json({
    userId: req.userId,
    session: req.session
  });
});

// Endpoint –¥–ª—è logout
app.post('/api/logout', authenticateSession, async (req, res) => {
  const token = req.headers['authorization']?.replace('Bearer ', '');
  await sessionManager.deleteSession(token);
  res.json({ message: 'Logged out successfully' });
});

// Logout –Ω–∞ –≤—Å—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö
app.post('/api/logout-all', authenticateSession, async (req, res) => {
  await sessionManager.deleteAllUserSessions(req.userId);
  res.json({ message: 'Logged out from all devices' });
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});
*/