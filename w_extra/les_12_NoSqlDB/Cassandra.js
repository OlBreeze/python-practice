// ============================================
// CASSANDRA: –ó–ë–ï–†–Ü–ì–ê–ù–ù–Ø –õ–û–ì–Ü–í –ü–û–î–Ü–ô
// ============================================

const cassandra = require('cassandra-driver');
const { v4: uuidv4 } = require('uuid');

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ Cassandra
const client = new cassandra.Client({
  contactPoints: ['127.0.0.1'],
  localDataCenter: 'datacenter1',
  keyspace: 'event_logs'
});

// ============================================
// 1. –°–¢–í–û–†–ï–ù–ù–Ø KEYSPACE –¢–ê –¢–ê–ë–õ–ò–¶–Ü
// ============================================

async function setupCassandra() {
  console.log('=== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø CASSANDRA ===\n');

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–µ–∑ keyspace –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
  const setupClient = new cassandra.Client({
    contactPoints: ['127.0.0.1'],
    localDataCenter: 'datacenter1'
  });

  await setupClient.connect();
  console.log('‚úì –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Cassandra');

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è keyspace –∑ —Ä–µ–ø–ª—ñ–∫–∞—Ü—ñ—î—é
  console.log('\n--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Keyspace ---');
  const createKeyspace = `
    CREATE KEYSPACE IF NOT EXISTS event_logs
    WITH replication = {
      'class': 'SimpleStrategy',
      'replication_factor': 3
    }
  `;

  await setupClient.execute(createKeyspace);
  console.log('‚úì Keyspace "event_logs" —Å—Ç–≤–æ—Ä–µ–Ω–æ');
  console.log('  –°—Ç—Ä–∞—Ç–µ–≥—ñ—è —Ä–µ–ø–ª—ñ–∫–∞—Ü—ñ—ó: SimpleStrategy');
  console.log('  –§–∞–∫—Ç–æ—Ä —Ä–µ–ø–ª—ñ–∫–∞—Ü—ñ—ó: 3 (–¥–∞–Ω—ñ –∫–æ–ø—ñ—é—é—Ç—å—Å—è –Ω–∞ 3 –≤—É–∑–ª–∏)');

  await setupClient.shutdown();
}

// ============================================
// 2. –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê–ë–õ–ò–¶–¨
// ============================================

async function createTables() {
  await client.connect();
  console.log('\n--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å ---');

  // –û—Å–Ω–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –¥–ª—è –ª–æ–≥—ñ–≤
  const createEventsTable = `
    CREATE TABLE IF NOT EXISTS events (
      event_id uuid,
      user_id text,
      event_type text,
      timestamp timestamp,
      metadata map<text, text>,
      severity text,
      message text,
      source text,
      PRIMARY KEY ((event_type), timestamp, event_id)
    ) WITH CLUSTERING ORDER BY (timestamp DESC)
  `;

  await client.execute(createEventsTable);
  console.log('‚úì –¢–∞–±–ª–∏—Ü—è "events" —Å—Ç–≤–æ—Ä–µ–Ω–∞');
  console.log('  Partition Key: event_type (—Ä–æ–∑–ø–æ–¥—ñ–ª –¥–∞–Ω–∏—Ö –ø–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó)');
  console.log('  Clustering Keys: timestamp DESC, event_id');
  console.log('  ‚Üí –î–∞–Ω—ñ —Å–æ—Ä—Ç—É—é—Ç—å—Å—è –∑–∞ —á–∞—Å–æ–º (–Ω–æ–≤—ñ—à—ñ –ø–µ—Ä—à—ñ)');

  // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è –¥–ª—è –ø–æ—à—É–∫—É –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
  const createUserEventsTable = `
    CREATE TABLE IF NOT EXISTS user_events (
      user_id text,
      event_id uuid,
      event_type text,
      timestamp timestamp,
      message text,
      PRIMARY KEY ((user_id), timestamp, event_id)
    ) WITH CLUSTERING ORDER BY (timestamp DESC)
  `;

  await client.execute(createUserEventsTable);
  console.log('‚úì –¢–∞–±–ª–∏—Ü—è "user_events" —Å—Ç–≤–æ—Ä–µ–Ω–∞ (–¥–ª—è –ø–æ—à—É–∫—É –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É)');

  // –¢–∞–±–ª–∏—Ü—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const createStatsTable = `
    CREATE TABLE IF NOT EXISTS event_stats (
      event_type text,
      date text,
      hour int,
      count counter,
      PRIMARY KEY ((event_type, date), hour)
    )
  `;

  await client.execute(createStatsTable);
  console.log('‚úì –¢–∞–±–ª–∏—Ü—è "event_stats" —Å—Ç–≤–æ—Ä–µ–Ω–∞ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)');
}

// ============================================
// 3. CRUD –û–ü–ï–†–ê–¶–Ü–á
// ============================================

class EventLogger {
  constructor(cassandraClient) {
    this.client = cassandraClient;
  }

  // CREATE: –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ª–æ–≥ –ø–æ–¥—ñ—ó
  async logEvent(eventData) {
    const eventId = uuidv4();
    const timestamp = new Date();

    const {
      userId,
      eventType,
      message,
      severity = 'info',
      source = 'application',
      metadata = {}
    } = eventData;

    // –í—Å—Ç–∞–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é
    const insertEvent = `
      INSERT INTO events (
        event_id, user_id, event_type, timestamp, 
        metadata, severity, message, source
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `;

    await this.client.execute(insertEvent, [
      eventId,
      userId,
      eventType,
      timestamp,
      metadata,
      severity,
      message,
      source
    ], { prepare: true });

    // –í—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—é user_events –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
    const insertUserEvent = `
      INSERT INTO user_events (
        user_id, event_id, event_type, timestamp, message
      ) VALUES (?, ?, ?, ?, ?)
    `;

    await this.client.execute(insertUserEvent, [
      userId,
      eventId,
      eventType,
      timestamp,
      message
    ], { prepare: true });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const date = timestamp.toISOString().split('T')[0];
    const hour = timestamp.getHours();

    const updateStats = `
      UPDATE event_stats 
      SET count = count + 1 
      WHERE event_type = ? AND date = ? AND hour = ?
    `;

    await this.client.execute(updateStats, [
      eventType,
      date,
      hour
    ], { prepare: true });

    console.log(`‚úì –õ–æ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${eventId}`);
    console.log(`  –¢–∏–ø: ${eventType}`);
    console.log(`  –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${userId}`);
    console.log(`  –ß–∞—Å: ${timestamp.toISOString()}`);

    return eventId;
  }

  // READ: –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–¥—ñ—ó –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
  async getRecentEvents(eventType, hoursAgo = 24) {
    const since = new Date(Date.now() - hoursAgo * 60 * 60 * 1000);

    const query = `
      SELECT * FROM events 
      WHERE event_type = ? AND timestamp >= ?
      LIMIT 1000
    `;

    const result = await this.client.execute(query, [eventType, since], {
      prepare: true
    });

    console.log(`\n‚úì –ó–Ω–∞–π–¥–µ–Ω–æ ${result.rows.length} –ø–æ–¥—ñ–π —Ç–∏–ø—É "${eventType}"`);
    console.log(`  –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ ${hoursAgo} –≥–æ–¥–∏–Ω(–∏)`);

    return result.rows;
  }

  // READ: –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async getUserEvents(userId, limit = 100) {
    const query = `
      SELECT * FROM user_events 
      WHERE user_id = ? 
      LIMIT ?
    `;

    const result = await this.client.execute(query, [userId, limit], {
      prepare: true
    });

    console.log(`\n‚úì –ó–Ω–∞–π–¥–µ–Ω–æ ${result.rows.length} –ø–æ–¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${userId}"`);

    return result.rows;
  }

  // UPDATE: –û–Ω–æ–≤–∏—Ç–∏ metadata –¥–ª—è –ø–æ–¥—ñ—ó
  async updateEventMetadata(eventType, timestamp, eventId, newMetadata) {
    const query = `
      UPDATE events 
      SET metadata = metadata + ? 
      WHERE event_type = ? AND timestamp = ? AND event_id = ?
    `;

    await this.client.execute(query, [
      newMetadata,
      eventType,
      timestamp,
      eventId
    ], { prepare: true });

    console.log(`‚úì Metadata –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥—ñ—ó ${eventId}`);
    console.log(`  –ù–æ–≤—ñ –¥–∞–Ω—ñ:`, newMetadata);
  }

  // DELETE: –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ø–æ–¥—ñ—ó (—Å—Ç–∞—Ä—à—ñ –∑–∞ 7 –¥–Ω—ñ–≤)
  async deleteOldEvents(daysAgo = 7) {
    const cutoffDate = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);

    // –í Cassandra –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ TTL –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ,
    // –∞–ª–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ–∫–∞–∑—É—î–º–æ —è–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è

    // –°–ø–æ—á–∞—Ç–∫—É –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π
    const eventTypes = ['login', 'logout', 'purchase', 'error', 'api_call'];

    let totalDeleted = 0;

    for (const eventType of eventTypes) {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–¥—ñ—ó
      const selectQuery = `
        SELECT event_id, timestamp 
        FROM events 
        WHERE event_type = ? AND timestamp < ?
        ALLOW FILTERING
      `;

      const result = await this.client.execute(selectQuery, [
        eventType,
        cutoffDate
      ]);

      // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–∂–Ω—É –ø–æ–¥—ñ—é
      for (const row of result.rows) {
        const deleteQuery = `
          DELETE FROM events 
          WHERE event_type = ? AND timestamp = ? AND event_id = ?
        `;

        await this.client.execute(deleteQuery, [
          eventType,
          row.timestamp,
          row.event_id
        ], { prepare: true });

        totalDeleted++;
      }
    }

    console.log(`\n‚úì –í–∏–¥–∞–ª–µ–Ω–æ ${totalDeleted} —Å—Ç–∞—Ä–∏—Ö –ø–æ–¥—ñ–π`);
    console.log(`  –°—Ç–∞—Ä—ñ—à–µ: ${cutoffDate.toISOString()}`);

    return totalDeleted;
  }

  // –ö–†–ê–©–ê –ü–†–ê–ö–¢–ò–ö–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è TTL –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ
  async logEventWithTTL(eventData, ttlSeconds = 7 * 24 * 60 * 60) {
    const eventId = uuidv4();
    const timestamp = new Date();

    const insertEvent = `
      INSERT INTO events (
        event_id, user_id, event_type, timestamp, 
        metadata, severity, message, source
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      USING TTL ?
    `;

    await this.client.execute(insertEvent, [
      eventId,
      eventData.userId,
      eventData.eventType,
      timestamp,
      eventData.metadata || {},
      eventData.severity || 'info',
      eventData.message,
      eventData.source || 'application',
      ttlSeconds
    ], { prepare: true });

    console.log(`‚úì –õ–æ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ TTL ${ttlSeconds}—Å (${ttlSeconds / 86400} –¥–Ω—ñ–≤)`);

    return eventId;
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async getEventStats(eventType, date) {
    const query = `
      SELECT * FROM event_stats 
      WHERE event_type = ? AND date = ?
    `;

    const result = await this.client.execute(query, [eventType, date], {
      prepare: true
    });

    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—ñ–π "${eventType}" –∑–∞ ${date}:`);

    const hourlyStats = {};
    result.rows.forEach(row => {
      hourlyStats[row.hour] = row.count.toNumber();
    });

    return hourlyStats;
  }
}

// ============================================
// 4. –†–ï–ü–õ–Ü–ö–ê–¶–Ü–Ø –¢–ê –ú–ê–°–®–¢–ê–ë–£–í–ê–ù–ù–Ø
// ============================================

function explainReplicationAndScaling() {
  console.log('\n=== –†–ï–ü–õ–Ü–ö–ê–¶–Ü–Ø –¢–ê –ú–ê–°–®–¢–ê–ë–£–í–ê–ù–ù–Ø –í CASSANDRA ===\n');

  console.log('üìö –†–ï–ü–õ–Ü–ö–ê–¶–Ü–Ø:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  console.log('1. Keyspace –≤–∏–∑–Ω–∞—á–∞—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é —Ä–µ–ø–ª—ñ–∫–∞—Ü—ñ—ó:');
  console.log('   ‚Ä¢ SimpleStrategy - –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä—É');
  console.log('   ‚Ä¢ NetworkTopologyStrategy - –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä—ñ–≤');
  console.log('');
  console.log('2. –§–∞–∫—Ç–æ—Ä —Ä–µ–ø–ª—ñ–∫–∞—Ü—ñ—ó (RF) –≤–∏–∑–Ω–∞—á–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ø—ñ–π:');
  console.log('   ‚Ä¢ RF=1: –¥–∞–Ω—ñ –Ω–∞ –æ–¥–Ω–æ–º—É –≤—É–∑–ª—ñ (–±–µ–∑ –≤—ñ–¥–º–æ–≤–æ—Å—Ç—ñ–π–∫–æ—Å—Ç—ñ)');
  console.log('   ‚Ä¢ RF=3: –¥–∞–Ω—ñ –Ω–∞ —Ç—Ä—å–æ—Ö –≤—É–∑–ª–∞—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)');
  console.log('   ‚Ä¢ RF=5: –¥–∞–Ω—ñ –Ω–∞ –ø\'—è—Ç–∏ –≤—É–∑–ª–∞—Ö (–≤–∏—Å–æ–∫–∞ –≤—ñ–¥–º–æ–≤–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å)');
  console.log('');
  console.log('3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–µ–ø–ª—ñ–∫–∞—Ü—ñ—è:');
  console.log('   ‚Ä¢ Cassandra –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–ø—ñ—é—î –¥–∞–Ω—ñ –Ω–∞ —ñ–Ω—à—ñ –≤—É–∑–ª–∏');
  console.log('   ‚Ä¢ –ü—Ä–∏ –≤—ñ–¥–º–æ–≤—ñ –≤—É–∑–ª–∞ –¥–∞–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑ —Ä–µ–ø–ª—ñ–∫');
  console.log('   ‚Ä¢ –ù–µ–º–∞—î single point of failure');
  console.log('');

  console.log('‚öñÔ∏è CONSISTENCY LEVELS:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  console.log('‚Ä¢ ONE: –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –≤—É–∑–ª–∞ (—à–≤–∏–¥–∫–æ, –º–µ–Ω—à –Ω–∞–¥—ñ–π–Ω–æ)');
  console.log('‚Ä¢ QUORUM: –±—ñ–ª—å—à—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤ (–±–∞–ª–∞–Ω—Å —à–≤–∏–¥–∫–æ—Å—Ç—ñ/–Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ)');
  console.log('‚Ä¢ ALL: –≤—Å—ñ –≤—É–∑–ª–∏ (–ø–æ–≤—ñ–ª—å–Ω–æ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å)');
  console.log('‚Ä¢ LOCAL_QUORUM: –±—ñ–ª—å—à—ñ—Å—Ç—å —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä—ñ');
  console.log('');

  console.log('üìà –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–ï –ú–ê–°–®–¢–ê–ë–£–í–ê–ù–ù–Ø:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  console.log('1. –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –≤—É–∑–ª—ñ–≤:');
  console.log('   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Å–µ—Ä–≤–µ—Ä –¥–æ –∫–ª–∞—Å—Ç–µ—Ä—É');
  console.log('   ‚Ä¢ Cassandra –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç—å –¥–∞–Ω—ñ');
  console.log('   ‚Ä¢ –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—É–ø–∏–Ω—è—Ç–∏ —Å–∏—Å—Ç–µ–º—É');
  console.log('');
  console.log('2. Partition Key –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–ø–æ–¥—ñ–ª:');
  console.log('   ‚Ä¢ event_type —è–∫ partition key');
  console.log('   ‚Ä¢ login –ø–æ–¥—ñ—ó ‚Üí –≤—É–∑–ª–∏ 1, 3, 5');
  console.log('   ‚Ä¢ error –ø–æ–¥—ñ—ó ‚Üí –≤—É–∑–ª–∏ 2, 4, 6');
  console.log('   ‚Ä¢ –†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
  console.log('');
  console.log('3. –õ—ñ–Ω—ñ–π–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è:');
  console.log('   ‚Ä¢ 3 –≤—É–∑–ª–∏ ‚Üí 30K ops/sec');
  console.log('   ‚Ä¢ 6 –≤—É–∑–ª—ñ–≤ ‚Üí 60K ops/sec');
  console.log('   ‚Ä¢ 12 –≤—É–∑–ª—ñ–≤ ‚Üí 120K ops/sec');
  console.log('');

  console.log('üåç MULTI-DATACENTER:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  console.log('‚Ä¢ –†–µ–ø–ª—ñ–∫–∞—Ü—ñ—è –º—ñ–∂ –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä–∞–º–∏ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó');
  console.log('‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ –Ñ–≤—Ä–æ–ø—ñ ‚Üí European DC');
  console.log('‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ –°–®–ê ‚Üí US DC');
  console.log('‚Ä¢ –ù–∏–∑—å–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ + –≤—ñ–¥–º–æ–≤–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å');
  console.log('');

  console.log('üíæ –ü–†–ò–ö–õ–ê–î –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  console.log(`
  CREATE KEYSPACE event_logs
  WITH replication = {
    'class': 'NetworkTopologyStrategy',
    'DC1': 3,  // 3 —Ä–µ–ø–ª—ñ–∫–∏ –≤ –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä—ñ 1
    'DC2': 3   // 3 —Ä–µ–ø–ª—ñ–∫–∏ –≤ –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä—ñ 2
  };
  `);
  console.log('');

  console.log('‚öôÔ∏è –ü–ï–†–ï–í–ê–ì–ò:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  console.log('‚úÖ –õ—ñ–Ω—ñ–π–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è (–¥–æ–¥–∞—î–º–æ –≤—É–∑–ª–∏ = –±—ñ–ª—å—à–µ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ)');
  console.log('‚úÖ –ù–µ–º–∞—î —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏ –≤—ñ–¥–º–æ–≤–∏');
  console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–±–æ—ó–≤');
  console.log('‚úÖ –í–∏—Å–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å (99.99%+)');
  console.log('‚úÖ –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—èWrite-Heavy –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
  console.log('‚úÖ –ß—É–¥–æ–≤–æ –¥–ª—è –ª–æ–≥—ñ–≤, —Å–µ–Ω—Å–æ—Ä—ñ–≤ IoT, —Ç–∞–π–º—Å–µ—Ä—ñ–π');
  console.log('');
}

// ============================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø
// ============================================

async function demonstrate() {
  try {
    console.log('üöÄ CASSANDRA: –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –†–û–ë–û–¢–ò\n');

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    await setupCassandra();
    await createTables();

    const logger = new EventLogger(client);

    // CREATE: –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
    console.log('\n=== CREATE: –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π ===');

    await logger.logEvent({
      userId: 'user123',
      eventType: 'login',
      message: 'User logged in from Chrome',
      severity: 'info',
      metadata: {
        ip: '192.168.1.100',
        browser: 'Chrome',
        os: 'Windows 10'
      }
    });

    await logger.logEvent({
      userId: 'user456',
      eventType: 'purchase',
      message: 'User purchased laptop',
      severity: 'info',
      metadata: {
        product_id: 'LP001',
        amount: '25000',
        currency: 'UAH'
      }
    });

    await logger.logEvent({
      userId: 'user123',
      eventType: 'error',
      message: 'Failed to load dashboard',
      severity: 'error',
      source: 'frontend',
      metadata: {
        error_code: '500',
        endpoint: '/api/dashboard'
      }
    });

    // –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ –ø–æ–¥—ñ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    for (let i = 0; i < 10; i++) {
      await logger.logEvent({
        userId: `user${100 + i}`,
        eventType: 'api_call',
        message: `API call to /products`,
        severity: 'info'
      });
    }

    // READ: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π
    console.log('\n=== READ: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π ===');

    const loginEvents = await logger.getRecentEvents('login', 24);
    if (loginEvents.length > 0) {
      console.log('\n–ü—Ä–∏–∫–ª–∞–¥ –ø–æ–¥—ñ—ó:');
      console.log(JSON.stringify(loginEvents[0], null, 2));
    }

    const userEvents = await logger.getUserEvents('user123');
    console.log(`\n–ü–æ–¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ user123: ${userEvents.length}`);

    // UPDATE: –û–Ω–æ–≤–ª–µ–Ω–Ω—è metadata
    console.log('\n=== UPDATE: –û–Ω–æ–≤–ª–µ–Ω–Ω—è metadata ===');

    if (loginEvents.length > 0) {
      await logger.updateEventMetadata(
        loginEvents[0].event_type,
        loginEvents[0].timestamp,
        loginEvents[0].event_id,
        {
          session_duration: '3600',
          pages_visited: '15'
        }
      );
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    const today = new Date().toISOString().split('T')[0];
    const stats = await logger.getEventStats('api_call', today);

    Object.entries(stats).forEach(([hour, count]) => {
      console.log(`  ${hour}:00 - ${count} –ø–æ–¥—ñ–π`);
    });

    // TTL Demo
    console.log('\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø TTL ===');
    await logger.logEventWithTTL({
      userId: 'user999',
      eventType: 'test',
      message: 'This event will expire in 60 seconds'
    }, 60);

    // DELETE: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–¥—ñ–π
    console.log('\n=== DELETE: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–¥—ñ–π ===');
    console.log('(–£ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ TTL)');

    // –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Ä–µ–ø–ª—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
    explainReplicationAndScaling();

    console.log('\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
  } finally {
    await client.shutdown();
  }
}

// –ó–∞–ø—É—Å–∫
demonstrate();