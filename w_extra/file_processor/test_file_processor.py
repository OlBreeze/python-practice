"""
–¢–µ—Å—Ç–∏ –¥–ª—è –º–æ–¥—É–ª—è file_processor.

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î pytest –∑ —Ñ—ñ–∫—Å—Ç—É—Ä–∞–º–∏ —Ç–∞ —Ç–∏–º—á–∞—Å–æ–≤–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏.
"""

import pytest
import os
import tempfile
from file_processor import FileProcessor


class TestFileProcessor:
    """–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è FileProcessor."""

    def test_file_write_read_basic(self, tmpdir):
        """
        –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É.

        Args:
            tmpdir: pytest —Ñ—ñ–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        """
        file_path = tmpdir.join("testfile.txt")
        test_data = "Hello, World!"

        FileProcessor.write_to_file(str(file_path), test_data)
        content = FileProcessor.read_from_file(str(file_path))

        assert content == test_data

    def test_file_write_read_empty_string(self, tmpdir):
        """–¢–µ—Å—Ç –∑–∞–ø–∏—Å—É —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞."""
        file_path = tmpdir.join("empty_file.txt")
        test_data = ""

        FileProcessor.write_to_file(str(file_path), test_data)
        content = FileProcessor.read_from_file(str(file_path))

        assert content == test_data

    def test_file_write_read_multiline(self, tmpdir):
        """–¢–µ—Å—Ç –∑–∞–ø–∏—Å—É —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É."""
        file_path = tmpdir.join("multiline_file.txt")
        test_data = "–†—è–¥–æ–∫ 1\n–†—è–¥–æ–∫ 2\n–†—è–¥–æ–∫ 3\n"

        FileProcessor.write_to_file(str(file_path), test_data)
        content = FileProcessor.read_from_file(str(file_path))

        assert content == test_data

    def test_file_write_read_large_data(self, tmpdir):
        """–¢–µ—Å—Ç  –∑–∞–ø–∏—Å—É —Ç–∞  —á–∏—Ç–∞–Ω–Ω—è –≤–µ–ª–∏–∫–∏—Ö –æ–±—Å—è–≥—ñ–≤ –¥–∞–Ω–∏—Ö ."""
        file_path = tmpdir.join("large_file.txt")
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ —Ä–æ–∑–º—ñ—Ä–æ–º –ø—Ä–∏–±–ª–∏–∑–Ω–æ 1MB
        test_data = "A" * (1024 * 1024)

        FileProcessor.write_to_file(str(file_path), test_data)
        content = FileProcessor.read_from_file(str(file_path))

        assert content == test_data
        assert len(content) == 1024 * 1024

    def test_file_write_read_unicode(self, tmpdir):
        """–¢–µ—Å—Ç –∑–∞–ø–∏—Å—É —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è Unicode —Å–∏–º–≤–æ–ª—ñ–≤."""
        file_path = tmpdir.join("unicode_file.txt")
        test_data = "–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç! üåç ÊµãËØï „Åì„Çì„Å´„Å°„ÅØ"

        FileProcessor.write_to_file(str(file_path), test_data)
        content = FileProcessor.read_from_file(str(file_path))

        assert content == test_data

    def test_read_nonexistent_file(self):
        """–¢–µ—Å—Ç —á–∏—Ç–∞–Ω–Ω—è –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ —Ñ–∞–π–ª—É."""
        with pytest.raises(FileNotFoundError) as exc_info:
            FileProcessor.read_from_file("nonexistent_file.txt")

        assert "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" in str(exc_info.value)

    def test_write_to_nested_directory(self, tmpdir):
        """–¢–µ—Å—Ç –∑–∞–ø–∏—Å—É —É –≤–∫–ª–∞–¥–µ–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é (—è–∫–∞ –Ω–µ —ñ—Å–Ω—É—î)."""
        nested_path = tmpdir.join("nested", "deep", "testfile.txt")
        test_data = "Nested file content"

        FileProcessor.write_to_file(str(nested_path), test_data)
        content = FileProcessor.read_from_file(str(nested_path))

        assert content == test_data

    def test_append_to_file(self, tmpdir):
        """–¢–µ—Å—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ —Ñ–∞–π–ª—É."""
        file_path = tmpdir.join("append_file.txt")
        initial_data = "Initial content\n"
        append_data = "Appended content"

        FileProcessor.write_to_file(str(file_path), initial_data)
        FileProcessor.append_to_file(str(file_path), append_data)
        content = FileProcessor.read_from_file(str(file_path))

        assert content == initial_data + append_data

    def test_file_exists(self, tmpdir):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É."""
        existing_file = tmpdir.join("existing_file.txt")
        FileProcessor.write_to_file(str(existing_file), "test")

        assert FileProcessor.file_exists(str(existing_file)) is True
        assert FileProcessor.file_exists("nonexistent_file.txt") is False

    def test_overwrite_existing_file(self, tmpdir):
        """–¢–µ—Å—Ç  –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É  —ñ—Å–Ω—É—é—á–æ–≥–æ  —Ñ–∞–π–ª—É ."""
        file_path = tmpdir.join("overwrite_file.txt")
        original_data = "Original content"
        new_data = "New content"

        FileProcessor.write_to_file(str(file_path), original_data)
        FileProcessor.write_to_file(str(file_path), new_data)
        content = FileProcessor.read_from_file(str(file_path))

        assert content == new_data

    @pytest.mark.parametrize("test_data", [
        "Simple text",
        "",
        "Text with\nnewlines\n",
        "Special chars: !@#$%^&*()",
        "Numbers: 1234567890",
        "Unicode: ‰Ω†Â•Ω‰∏ñÁïå"
    ])
    def test_write_read_parametrized(self, tmpdir, test_data):
        """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∏–π —Ç–µ—Å—Ç –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö."""
        file_path = tmpdir.join(f"param_test_{hash(test_data)}.txt")

        FileProcessor.write_to_file(str(file_path), test_data)
        content = FileProcessor.read_from_file(str(file_path))

        assert content == test_data


# –§—ñ–∫—Å—Ç—É—Ä–∏ –¥–ª—è —Å–∫–ª–∞–¥–Ω—ñ—à–∏—Ö —Ç–µ—Å—Ç—ñ–≤
@pytest.fixture
def temp_file_with_content():
    """
    –§—ñ–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.

    Yields:
        tuple: (file_path, content)
    """
    with tempfile.NamedTemporaryFile(mode='w', delete=False, encoding='utf-8') as f:
        content = "Test content from fixture"
        f.write(content)
        temp_path = f.name

    try:
        yield temp_path, content
    finally:
        if os.path.exists(temp_path):
            os.unlink(temp_path)


@pytest.fixture
def large_test_data():
    """–§—ñ–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–ª–∏–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö."""
    return ("Line {}\n".format(i) for i in range(10000))


class TestFileProcessorWithFixtures:
    """–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–µ—Å—Ç–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö —Ñ—ñ–∫—Å—Ç—É—Ä."""

    def test_read_existing_temp_file(self, temp_file_with_content):
        """–¢–µ—Å—Ç —á–∏—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É."""
        file_path, expected_content = temp_file_with_content
        content = FileProcessor.read_from_file(file_path)
        assert content == expected_content

    def test_large_data_processing(self, tmpdir, large_test_data):
        """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –≤–µ–ª–∏–∫–∏—Ö –¥–∞–Ω–∏—Ö –∑ —Ñ—ñ–∫—Å—Ç—É—Ä–æ—é."""
        file_path = tmpdir.join("large_data_test.txt")
        test_content = "".join(large_test_data)

        FileProcessor.write_to_file(str(file_path), test_content)
        content = FileProcessor.read_from_file(str(file_path))

        assert content == test_content
        assert content.count('\n') == 10000
