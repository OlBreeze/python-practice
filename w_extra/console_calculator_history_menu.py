"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (+, -, *, /)
- –†–∞–±–æ—Ç—É —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ (Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
- –û–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
- –¶–∏–∫–ª–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É
"""

from decimal import Decimal, InvalidOperation, Overflow
from typing import Union, Tuple, Optional


class UnknownOperationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""

    def __init__(self, message: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: +, -, *, /"):
        self.message = message
        super().__init__(self.message)


class Calculator:
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""

    OPERATIONS = {'+', '-', '*', '/'}

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
        self.history = []

    def get_number(self, prompt: str = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ") -> Decimal:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.

        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞

        Returns:
            Decimal: –í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        """
        while True:
            try:
                user_input = input(prompt).strip()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
                if not user_input:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                    continue

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                number = Decimal(user_input)
                return number

            except InvalidOperation:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                raise
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    def get_operation(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.

        Returns:
            str: –í–∞–ª–∏–¥–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        """
        while True:
            try:
                operation = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (+, -, *, /): ").strip()

                if not operation:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é!")
                    continue

                if operation not in self.OPERATIONS:
                    raise UnknownOperationError(
                        f"–û–ø–µ—Ä–∞—Ü–∏—è '{operation}' –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞! "
                        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(sorted(self.OPERATIONS))}"
                    )

                return operation

            except UnknownOperationError as e:
                print(f"‚ùå {e}")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                raise
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    def calculate(self, num1: Decimal, num2: Decimal, operation: str) -> Optional[Decimal]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.

        Args:
            num1: –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
            num2: –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
            operation: –û–ø–µ—Ä–∞—Ü–∏—è

        Returns:
            Optional[Decimal]: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if operation == '+':
                result = num1 + num2
            elif operation == '-':
                result = num1 - num2
            elif operation == '*':
                result = num1 * num2
            elif operation == '/':
                if num2 == 0:
                    raise ZeroDivisionError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!")
                result = num1 / num2
            else:
                # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∏–∑-–∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                raise UnknownOperationError(f"–û–ø–µ—Ä–∞—Ü–∏—è '{operation}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
            if abs(result) > Decimal('1E+308'):  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
                raise Overflow("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫!")

            return result

        except ZeroDivisionError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è: {e}")
            return None
        except Overflow as e:
            print(f"‚ùå –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ: {e}")
            return None
        except InvalidOperation as e:
            print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {e}")
            return None
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏: {e}")
            return None

    def format_number(self, number: Decimal) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

        Args:
            number: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        """
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        if number == number.to_integral_value():
            return str(int(number))
        else:
            return str(number.normalize())

    def add_to_history(self, num1: Decimal, operation: str, num2: Decimal, result: Optional[Decimal]) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é.

        Args:
            num1: –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
            operation: –û–ø–µ—Ä–∞—Ü–∏—è
            num2: –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç
        """
        if result is not None:
            self.history.append({
                'expression': f"{self.format_number(num1)} {operation} {self.format_number(num2)}",
                'result': self.format_number(result)
            })
        else:
            self.history.append({
                'expression': f"{self.format_number(num1)} {operation} {self.format_number(num2)}",
                'result': '–û—à–∏–±–∫–∞'
            })

    def show_history(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã—á–∏—Å–ª–µ–Ω–∏–π."""
        if not self.history:
            print("üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return

        print("\nüìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:")
        print("-" * 30)
        for i, calc in enumerate(self.history[-10:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            print(f"{i}. {calc['expression']} = {calc['result']}")
        print("-" * 30)

    def show_menu(self) -> str:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            str: –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        print("\nüßÆ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†")
        print("1. –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("3. –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("4. –í—ã—Ö–æ–¥")

        while True:
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç (1-4): ").strip()
                if choice in ['1', '2', '3', '4']:
                    return choice
                print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç 1 –¥–æ 4!")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                return '4'
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def run_single_calculation(self) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ."""
        try:
            print("\n‚ûï –ù–û–í–û–ï –í–´–ß–ò–°–õ–ï–ù–ò–ï")
            print("-" * 20)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            num1 = self.get_number("–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ")
            operation = self.get_operation()
            num2 = self.get_number("–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ")

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ
            result = self.calculate(num1, operation, num2)

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            expression = f"{self.format_number(num1)} {operation} {self.format_number(num2)}"
            if result is not None:
                print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expression} = {self.format_number(result)}")
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏: {expression}")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_history(num1, operation, num2, result)

        except KeyboardInterrupt:
            print("\n‚è∏Ô∏è –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    def run(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        print("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!")
        print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ü–µ–ª—ã–µ –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞.")

        try:
            while True:
                choice = self.show_menu()

                if choice == '1':
                    self.run_single_calculation()

                elif choice == '2':
                    self.show_history()

                elif choice == '3':
                    self.history.clear()
                    print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")

                elif choice == '4':
                    print("üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞!")
                    break

        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É."""
    calculator = Calculator()
    calculator.run()


if __name__ == "__main__":
    main()


# ========================================
# –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò –¢–ï–°–¢–´
# ========================================

def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê")
    print("=" * 40)

    calc = Calculator()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        (Decimal('10'), '+', Decimal('5'), "–û–±—ã—á–Ω–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ"),
        (Decimal('10.5'), '-', Decimal('3.2'), "–î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞"),
        (Decimal('4'), '*', Decimal('7'), "–£–º–Ω–æ–∂–µ–Ω–∏–µ"),
        (Decimal('15'), '/', Decimal('3'), "–î–µ–ª–µ–Ω–∏–µ"),
        (Decimal('10'), '/', Decimal('0'), "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"),
        (Decimal('1E+200'), '*', Decimal('1E+200'), "–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ"),
    ]

    for num1, op, num2, description in test_cases:
        print(f"\nüìù –¢–µ—Å—Ç: {description}")
        print(f"   –í—ã—Ä–∞–∂–µ–Ω–∏–µ: {calc.format_number(num1)} {op} {calc.format_number(num2)}")

        result = calc.calculate(num1, num2, op)
        if result is not None:
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {calc.format_number(result)}")
        else:
            print("   –†–µ–∑—É–ª—å—Ç–∞—Ç: –û—à–∏–±–∫–∞")

        calc.add_to_history(num1, op, num2, result)

    # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    calc.show_history()

# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
demo()